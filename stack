#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: mozilla::CubebUtils::InitBrandName() [dom/media/CubebUtils.cpp:367]
#04: mozilla::detail::RunnableFunction<void (*)()>::Run() [xpcom/threads/nsThreadUtils.h:528]
#05: mozilla::EventTargetWrapper::Runner::Run() [xpcom/threads/AbstractThread.cpp:154]
#06: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#07: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#08: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::GetClassObject(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:870]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsStringBundle::GetStringFromAUTF8Name(nsTSubstring<char> const&, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:148]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsPermissionManager::ImportDefaults() [extensions/cookie/nsPermissionManager.cpp:2867]
#02: nsPermissionManager::InitDB(bool) [extensions/cookie/nsPermissionManager.cpp:1579]
#03: nsPermissionManager::Init() [xpcom/base/nsCOMPtr.h:424]
#04: nsPermissionManager::GetXPCOMSingleton() [extensions/cookie/nsPermissionManager.cpp:908]
#05: nsIPermissionManagerConstructor(nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:72]
#06: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1086]
#07: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#08: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#09: mozilla::services::GetPermissionManager() [xpcom/base/nsCOMPtr.h:1215]
#10: TestSitePerm(nsIPrincipal*, char const*, unsigned int, bool) [mfbt/AlreadyAddRefed.h:121]
#11: nsContentUtils::AllowXULXBLForPrincipal(nsIPrincipal*) [dom/base/nsContentUtils.cpp:3968]
#12: XPCWrappedNativeScope::XPCWrappedNativeScope(JSContext*, JS::Handle<JSObject*>) [js/xpconnect/src/XPCWrappedNativeScope.cpp:86]
#13: xpc::CreateGlobalObject(JSContext*, JSClass const*, nsIPrincipal*, JS::CompartmentOptions&) [js/public/Class.h:938]
#14: mozilla::dom::SimpleGlobalObject::Create(mozilla::dom::SimpleGlobalObject::GlobalType, JS::Handle<JS::Value>) [js/public/RootingAPI.h:850]
#15: mozilla::dom::WidevineCDMManifest::Init(nsTSubstring<char16_t> const&) [s3:gecko-generated-sources-l1:0c065936d70d001befed7c9ed2a2bbe11169ad8eb18efa1d74aa64b775f90add1ded5cca335b6bd5ffa6f2b37fc1aec262b344fb5a4c9207e81f4ffdb9d2ad2b/dom/bindings/WidevineCDMManifestBinding.cpp::204]
#16: mozilla::gmp::GMPParent::ParseChromiumManifest(nsTSubstring<char16_t> const&) [dom/media/gmp/GMPParent.cpp:737]
#17: mozilla::detail::ProxyRunnable<mozilla::MozPromise<bool, nsresult, false>, RefPtr<mozilla::MozPromise<bool, nsresult, false> > (mozilla::gmp::GMPParent::*)(nsTSubstring<char16_t> const&), mozilla::gmp::GMPParent, StoreCopyPassByRRef<NS_ConvertUTF8toUTF16> >::Run() [xpcom/base/nsAutoPtr.h:38]
#18: mozilla::EventTargetWrapper::Runner::Run() [xpcom/threads/AbstractThread.cpp:154]
#19: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#20: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#21: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsPrefBranch::GetDefaultFromPropertiesFile(char const*, nsTSubstring<char16_t>&) [modules/libpref/nsPrefBranch.cpp:970]
#04: nsPrefBranch::GetComplexValue(char const*, nsID const&, void**) [modules/libpref/nsPrefBranch.cpp:356]
#05: mozilla::Preferences::GetLocalizedString(char const*, nsTSubstring<char16_t>&) [modules/libpref/Preferences.cpp:1795]
#06: mozilla::Preferences::GetLocalizedCString(char const*, nsTSubstring<char>&) [modules/libpref/Preferences.cpp:1783]
#07: mozilla::dom::IndexedDatabaseManager::Init() [dom/indexedDB/IndexedDatabaseManager.cpp:436]
#08: mozilla::dom::IndexedDatabaseManager::GetOrCreate() [dom/indexedDB/IndexedDatabaseManager.cpp:353]
#09: mozilla::dom::workers::WorkerPrivate::GetLoadInfo(JSContext*, nsPIDOMWindowInner*, mozilla::dom::workers::WorkerPrivate*, nsTSubstring<char16_t> const&, bool, mozilla::dom::workers::WorkerPrivate::LoadGroupBehavior, mozilla::dom::WorkerType, mozilla::dom::workers::WorkerLoadInfo*) [xpcom/base/nsDebug.h:55]
#10: mozilla::dom::workers::WorkerPrivate::Constructor(JSContext*, nsTSubstring<char16_t> const&, bool, mozilla::dom::WorkerType, nsTSubstring<char16_t> const&, nsTSubstring<char> const&, mozilla::dom::workers::WorkerLoadInfo*, mozilla::ErrorResult&) [dom/bindings/ErrorResult.h:358]
#11: mozilla::dom::workers::ChromeWorkerPrivate::Constructor(mozilla::dom::GlobalObject const&, nsTSubstring<char16_t> const&, mozilla::ErrorResult&) [dom/workers/WorkerPrivate.cpp:4648]
#12: mozilla::dom::ChromeWorkerBinding::_constructor(JSContext*, unsigned int, JS::Value*) [mfbt/AlreadyAddRefed.h:143]
#13: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#14: js::CallJSNativeConstructor(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:324]
#15: InternalConstruct(JSContext*, js::AnyConstructArgs const&) [js/src/vm/Interpreter.cpp:589]
#16: js::ConstructFromStack(JSContext*, JS::CallArgs const&) [js/src/vm/Interpreter.cpp:615]
#17: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3068]
#18: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#19: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#20: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#21: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#22: bool NativeGetPropertyInline<(js::AllowGC)1>(JSContext*, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<jsid, (js::AllowGC)1>::HandleType, IsNameLookup, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2377]
#23: js::GetProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, js::PropertyName*, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#24: js::GetProperty(JSContext*, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#25: Interpret(JSContext*, js::RunState&) [js/public/RootingAPI.h:835]
#26: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#27: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#28: <name omitted> [js/src/vm/Interpreter.cpp:550]
#29: js::jit::InterpretResume(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [mfbt/GuardObjects.h:119]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsNSSComponent::GetPIPNSSBundleString(char const*, nsTSubstring<char16_t>&) [security/manager/ssl/nsNSSComponent.cpp:261]
#04: nsNSSComponent::ConfigureInternalPKCS11Token() [security/manager/ssl/nsNSSComponent.cpp:1365]
#05: nsNSSComponent::InitializeNSS() [xpcom/string/nsTString.h:569]
#06: nsNSSComponent::Init() [security/manager/ssl/nsNSSComponent.cpp:2273]
#07: (anonymous namespace)::nsNSSComponentConstructor(nsISupports*, nsID const&, void**) [security/manager/ssl/nsNSSModule.cpp:132]
#08: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1086]
#09: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#10: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#11: nsCOMPtr_base::assign_from_gs_contractid(nsGetServiceByContractID, nsID const&) [xpcom/base/nsCOMPtr.cpp:95]
#12: EnsureNSSInitializedChromeOrContent() [security/manager/ssl/nsNSSComponent.cpp:116]
#13: nsresult mozilla::psm::Constructor<nsNSSCertificateDB, (nsresult (nsNSSCertificateDB::*)())0, (mozilla::psm::ProcessRestriction)0, (mozilla::psm::ThreadRestriction)1>(nsISupports*, nsID const&, void**) [security/manager/ssl/nsNSSModule.cpp:94]
#14: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1003]
#15: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#16: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:347]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:349]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:351]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:353]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:355]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:360]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::ScrollbarsSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2387]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::NumberControlSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2403]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::FormsSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2408]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::NoScriptSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2435]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::UASheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2461]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::RegisterFromEnumerator(nsICategoryManager*, char const*, nsISimpleEnumerator*, unsigned int) [xpcom/base/nsCOMPtr.h:424]
#06: nsStyleSheetService::Init() [xpcom/base/nsCOMPtr.h:800]
#07: nsStyleSheetServiceConstructor(nsISupports*, nsID const&, void**) [layout/build/nsLayoutModule.cpp:466]
#08: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1086]
#09: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#10: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#11: nsStyleSheetService::GetInstance() [xpcom/base/nsCOMPtr.h:1215]
#12: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2465]
#13: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#14: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#15: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#16: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#17: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#18: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#08: mozilla::dom::XULDocument::ApplyPersistentAttributes() [xpcom/base/nsCOMPtr.h:1215]
#09: mozilla::dom::XULDocument::ResumeWalk() [dom/xul/XULDocument.cpp:2968]
#10: mozilla::dom::XULDocument::EndLoad() [dom/xul/XULDocument.cpp:567]
#11: XULContentSinkImpl::DidBuildModel(bool) [xpcom/base/nsCOMPtr.h:396]
#12: nsParser::DidBuildModel(nsresult) [parser/htmlparser/nsParser.cpp:499]
#13: nsParser::ResumeParse(bool, bool, bool) [parser/htmlparser/nsParser.cpp:1101]
#14: nsParser::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [parser/htmlparser/nsParser.cpp:1475]
#15: nsDocumentOpenInfo::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:424]
#16: nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#17: non-virtual thunk to nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [modules/libjar/nsJARChannel.cpp:1105]
#18: nsInputStreamPump::OnStateStop() [xpcom/threads/RecursiveMutex.h:118]
#19: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:435]
#20: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#21: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#22: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#23: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::AddFCItemsForAnonymousContent(nsFrameConstructorState&, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>&, nsCSSFrameConstructor::FrameConstructionItemList&, unsigned int) [layout/base/nsCSSFrameConstructor.cpp:11223]
#08: nsCSSFrameConstructor::BeginBuildingScrollFrame(nsFrameConstructorState&, nsIContent*, nsStyleContext*, nsContainerFrame*, nsAtom*, bool, nsContainerFrame*&) [layout/base/nsCSSFrameConstructor.cpp:4742]
#09: nsCSSFrameConstructor::SetUpDocElementContainingBlock(nsIContent*) [layout/base/nsCSSFrameConstructor.cpp:3038]
#10: nsCSSFrameConstructor::ConstructDocElementFrame(mozilla::dom::Element*, nsILayoutHistoryState*) [layout/base/nsCSSFrameConstructor.cpp:2539]
#11: nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [layout/base/nsCSSFrameConstructor.cpp:8111]
#12: nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind) [layout/base/nsCSSFrameConstructor.cpp:8001]
#13: mozilla::PresShell::Initialize(int, int) [mfbt/RefPtr.h:287]
#14: mozilla::dom::XULDocument::StartLayout() [dom/xul/XULDocument.cpp:1934]
#15: mozilla::dom::XULDocument::DoneWalking() [dom/xul/XULDocument.cpp:3026]
#16: mozilla::dom::XULDocument::ResumeWalk() [xpcom/base/nsCOMPtr.h:424]
#17: mozilla::dom::XULDocument::EndLoad() [dom/xul/XULDocument.cpp:567]
#18: XULContentSinkImpl::DidBuildModel(bool) [xpcom/base/nsCOMPtr.h:396]
#19: nsParser::DidBuildModel(nsresult) [parser/htmlparser/nsParser.cpp:499]
#20: nsParser::ResumeParse(bool, bool, bool) [parser/htmlparser/nsParser.cpp:1101]
#21: nsParser::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [parser/htmlparser/nsParser.cpp:1475]
#22: nsDocumentOpenInfo::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:424]
#23: nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#24: non-virtual thunk to nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [modules/libjar/nsJARChannel.cpp:1105]
#25: nsInputStreamPump::OnStateStop() [xpcom/threads/RecursiveMutex.h:118]
#26: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:435]
#27: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#28: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#29: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#30: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#08: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#09: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#10: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#11: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#12: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#13: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#14: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#15: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#16: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#17: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#18: <name omitted> [js/src/vm/Interpreter.cpp:550]
#19: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#20: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#21: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#22: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#25: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3076]
#26: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#27: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#28: <name omitted> [js/src/vm/Interpreter.cpp:550]
#29: js::jit::InterpretResume(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [mfbt/GuardObjects.h:119]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:806]
#05: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#06: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#07: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#08: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#09: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#10: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#11: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#12: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#13: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#14: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#15: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#16: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#17: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#18: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#19: <name omitted> [js/src/vm/Interpreter.cpp:550]
#20: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#21: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#22: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#23: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#26: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3076]
#27: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#28: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#29: <name omitted> [js/src/vm/Interpreter.cpp:550]
#30: js::jit::InterpretResume(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [mfbt/GuardObjects.h:119]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#08: mozilla::dom::ContentParent::GetNewOrUsedBrowserProcess(nsTSubstring<char16_t> const&, mozilla::hal::ProcessPriority, mozilla::dom::ContentParent*, bool) [xpcom/base/nsCOMPtr.h:1215]
#09: mozilla::dom::ContentParent::CreateBrowser(mozilla::dom::TabContext const&, mozilla::dom::Element*, mozilla::dom::ContentParent*, mozilla::dom::TabParent*, unsigned long long) [mfbt/AlreadyAddRefed.h:121]
#10: nsFrameLoader::TryRemoteBrowser() [dom/base/nsFrameLoader.cpp:3223]
#11: nsFrameLoader::ShowRemoteFrame(mozilla::gfx::IntSizeTyped<mozilla::ScreenPixel> const&, nsSubDocumentFrame*) [dom/base/nsFrameLoader.cpp:1394]
#12: nsFrameLoader::Show(int, int, int, int, nsSubDocumentFrame*) [dom/base/nsFrameLoader.cpp:1251]
#13: nsSubDocumentFrame::ShowViewer() [layout/generic/nsIFrame.h:4527]
#14: AsyncFrameInit::Run() [tools/profiler/public/GeckoProfiler.h:596]
#15: nsContentUtils::RemoveScriptBlocker() [xpcom/base/nsCOMPtr.h:396]
#16: nsDocument::EndUpdate(unsigned int) [dom/base/nsDocument.cpp:5376]
#17: mozilla::dom::XULDocument::EndUpdate(unsigned int) [dom/xul/XULDocument.cpp:3196]
#18: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/mozAutoDocUpdate.h:40]
#19: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#20: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#21: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#22: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#23: <name omitted> [js/src/vm/Interpreter.cpp:550]
#24: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#25: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#26: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#27: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#28: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#29: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#30: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3076]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#33: <name omitted> [js/src/vm/Interpreter.cpp:550]
#34: js::jit::InterpretResume(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [mfbt/GuardObjects.h:119]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsJSCID::CreateInstance(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:661]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractIDWithError::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:293]
#08: nsCOMPtr_base::assign_from_gs_contractid_with_error(nsGetServiceByContractIDWithError const&, nsID const&) [xpcom/base/nsCOMPtr.cpp:106]
#09: nsAppStartupNotifier::Observe(nsISupports*, char const*, char16_t const*) [xpcom/base/nsCOMPtr.h:1029]
#10: XRE_InitEmbedding2(nsIFile*, nsIFile*, nsIDirectoryServiceProvider*) [xpcom/base/nsCOMPtr.h:424]
#11: mozilla::ipc::ScopedXREEmbed::Start() [ipc/glue/ScopedXREEmbed.cpp:98]
#12: mozilla::dom::ContentProcess::Init(int, char**) [xpcom/base/nsCOMPtr.h:780]
#13: XRE_InitChildProcess(int, char**, XREChildData const*) [toolkit/xre/nsEmbedFunctions.cpp:671]
#14: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::LoadAndRegisterSheet(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:173]
#06: mozilla::dom::ContentChild::RecvLoadAndRegisterSheet(mozilla::ipc::URIParams const&, unsigned int const&) [xpcom/base/nsCOMPtr.h:424]
#07: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::6757]
#08: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#09: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#10: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#11: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#12: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#13: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#14: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#15: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#16: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#17: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#18: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#19: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#20: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::LoadAndRegisterSheet(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:173]
#06: mozilla::dom::ContentChild::RecvLoadAndRegisterSheet(mozilla::ipc::URIParams const&, unsigned int const&) [xpcom/base/nsCOMPtr.h:424]
#07: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::6757]
#08: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#09: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#10: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#11: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#12: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#13: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#14: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#15: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#16: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#17: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#18: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#19: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#20: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#08: ChromeTooltipListener::ChromeTooltipListener(nsWebBrowser*, nsIWebBrowserChrome*) [xpcom/base/nsCOMPtr.h:1215]
#09: nsDocShellTreeOwner::AddChromeListeners() [mfbt/RefPtr.h:193]
#10: nsWebBrowser::Create() [xpcom/base/nsAutoPtr.h:38]
#11: mozilla::dom::TabChild::Init() [dom/ipc/TabChild.cpp:589]
#12: mozilla::dom::nsIContentChild::RecvPBrowserConstructor(mozilla::dom::PBrowserChild*, mozilla::dom::IdType<mozilla::dom::TabParent> const&, mozilla::dom::IdType<mozilla::dom::TabParent> const&, mozilla::dom::IPCTabContext const&, unsigned int const&, mozilla::dom::IdType<mozilla::dom::ContentParent> const&, bool const&) [xpcom/base/nsDebug.h:55]
#13: mozilla::dom::ContentChild::RecvPBrowserConstructor(mozilla::dom::PBrowserChild*, mozilla::dom::IdType<mozilla::dom::TabParent> const&, mozilla::dom::IdType<mozilla::dom::TabParent> const&, mozilla::dom::IPCTabContext const&, unsigned int const&, mozilla::dom::IdType<mozilla::dom::ContentParent> const&, bool const&) [dom/ipc/ContentChild.cpp:1838]
#14: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4969]
#15: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#16: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#17: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#18: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#19: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#20: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#21: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#22: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#23: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#24: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#25: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#26: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#27: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#28: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsMessageManagerScriptExecutor::TryCacheLoadAndCompileScript(nsTSubstring<char16_t> const&, bool, bool, JS::MutableHandle<JSScript*>) [dom/base/nsFrameMessageManager.cpp:1638]
#02: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [js/public/RootingAPI.h:426]
#03: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#04: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#05: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#06: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#07: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#08: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#09: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#10: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#11: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#12: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#13: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#14: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#15: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#16: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#17: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#18: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#19: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsMessageManagerScriptExecutor::TryCacheLoadAndCompileScript(nsTSubstring<char16_t> const&, bool, bool, JS::MutableHandle<JSScript*>) [dom/base/nsFrameMessageManager.cpp:1638]
#02: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [js/public/RootingAPI.h:426]
#03: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#04: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#05: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#06: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#07: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#08: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#09: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#10: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#11: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#12: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#13: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#14: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#15: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#16: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#17: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#18: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#19: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:347]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:349]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:351]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:353]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:355]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::ScrollbarsSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2387]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::NumberControlSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2403]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::FormsSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2408]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::NoScriptSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2435]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::UASheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2461]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: mozilla::CubebUtils::InitBrandName() [dom/media/CubebUtils.cpp:367]
#04: mozilla::detail::RunnableFunction<void (*)()>::Run() [xpcom/threads/nsThreadUtils.h:528]
#05: mozilla::EventTargetWrapper::Runner::Run() [xpcom/threads/AbstractThread.cpp:154]
#06: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#07: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#08: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#11: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#12: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#13: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#14: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsPrefBranch::GetDefaultFromPropertiesFile(char const*, nsTSubstring<char16_t>&) [modules/libpref/nsPrefBranch.cpp:970]
#04: nsPrefBranch::GetComplexValue(char const*, nsID const&, void**) [modules/libpref/nsPrefBranch.cpp:356]
#05: mozilla::Preferences::GetLocalizedString(char const*, nsTSubstring<char16_t>&) [modules/libpref/Preferences.cpp:1795]
#06: mozilla::Preferences::GetLocalizedCString(char const*, nsTSubstring<char>&) [modules/libpref/Preferences.cpp:1783]
#07: nsHtml5StreamParser::nsHtml5StreamParser(nsHtml5TreeOpExecutor*, nsHtml5Parser*, eParserMode) [xpcom/string/nsTStringRepr.h:159]
#08: nsHtml5Parser::MarkAsNotScriptCreated(char const*) [parser/html/nsHtml5Parser.cpp:606]
#09: nsHTMLDocument::StartDocumentLoad(char const*, nsIChannel*, nsILoadGroup*, nsISupports*, nsIStreamListener**, bool, nsIContentSink*) [dom/html/nsHTMLDocument.cpp:604]
#10: nsContentDLF::CreateDocument(char const*, nsIChannel*, nsILoadGroup*, nsIDocShell*, nsID const&, nsIStreamListener**, nsIContentViewer**) [layout/build/nsContentDLF.cpp:364]
#11: nsContentDLF::CreateInstance(char const*, nsIChannel*, nsILoadGroup*, nsTSubstring<char> const&, nsIDocShell*, nsISupports*, nsIStreamListener**, nsIContentViewer**) [layout/build/nsContentDLF.cpp:186]
#12: nsDocShell::NewContentViewerObj(nsTSubstring<char> const&, nsIRequest*, nsILoadGroup*, nsIStreamListener**, nsIContentViewer**) [docshell/base/nsDocShell.cpp:9414]
#13: nsDocShell::CreateContentViewer(nsTSubstring<char> const&, nsIRequest*, nsIStreamListener**) [docshell/base/nsDocShell.cpp:9205]
#14: nsDSURIContentListener::DoContent(nsTSubstring<char> const&, bool, nsIRequest*, nsIStreamListener**, bool*) [docshell/base/nsDSURIContentListener.cpp:114]
#15: nsDocumentOpenInfo::TryContentListener(nsIURIContentListener*, nsIChannel*) [uriloader/base/nsURILoader.cpp:739]
#16: nsDocumentOpenInfo::DispatchContent(nsIRequest*, nsISupports*) [uriloader/base/nsURILoader.cpp:417]
#17: nsDocumentOpenInfo::OnStartRequest(nsIRequest*, nsISupports*) [uriloader/base/nsURILoader.cpp:295]
#18: nsBaseChannel::OnStartRequest(nsIRequest*, nsISupports*) [netwerk/base/nsBaseChannel.cpp:859]
#19: nsInputStreamPump::OnStateStart() [netwerk/base/nsInputStreamPump.cpp:517]
#20: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:420]
#21: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#22: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#23: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#24: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#25: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#26: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#27: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#28: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#29: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#30: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#31: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::AddFCItemsForAnonymousContent(nsFrameConstructorState&, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>&, nsCSSFrameConstructor::FrameConstructionItemList&, unsigned int) [layout/base/nsCSSFrameConstructor.cpp:11223]
#08: nsCSSFrameConstructor::BeginBuildingScrollFrame(nsFrameConstructorState&, nsIContent*, nsStyleContext*, nsContainerFrame*, nsAtom*, bool, nsContainerFrame*&) [layout/base/nsCSSFrameConstructor.cpp:4742]
#09: nsCSSFrameConstructor::SetUpDocElementContainingBlock(nsIContent*) [layout/base/nsCSSFrameConstructor.cpp:3038]
#10: nsCSSFrameConstructor::ConstructDocElementFrame(mozilla::dom::Element*, nsILayoutHistoryState*) [layout/base/nsCSSFrameConstructor.cpp:2539]
#11: nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [layout/base/nsCSSFrameConstructor.cpp:8111]
#12: nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind) [layout/base/nsCSSFrameConstructor.cpp:8001]
#13: mozilla::PresShell::Initialize(int, int) [mfbt/RefPtr.h:287]
#14: nsContentSink::StartLayout(bool) [dom/base/nsContentSink.cpp:1286]
#15: nsHtml5TreeOpExecutor::StartLayout(bool*) [mfbt/RefPtr.h:311]
#16: nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor*, nsIContent**, bool*) [parser/html/nsHtml5TreeOperation.cpp:1146]
#17: nsHtml5TreeOpExecutor::RunFlushLoop() [parser/html/nsHtml5TreeOpExecutor.cpp:461]
#18: nsHtml5ExecutorFlusher::Run() [parser/html/nsHtml5StreamParser.cpp:132]
#19: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#20: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#21: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#22: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#23: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#24: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#25: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#26: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#27: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#28: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::AddFCItemsForAnonymousContent(nsFrameConstructorState&, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>&, nsCSSFrameConstructor::FrameConstructionItemList&, unsigned int) [layout/base/nsCSSFrameConstructor.cpp:11223]
#08: nsCSSFrameConstructor::BeginBuildingScrollFrame(nsFrameConstructorState&, nsIContent*, nsStyleContext*, nsContainerFrame*, nsAtom*, bool, nsContainerFrame*&) [layout/base/nsCSSFrameConstructor.cpp:4742]
#09: nsCSSFrameConstructor::SetUpDocElementContainingBlock(nsIContent*) [layout/base/nsCSSFrameConstructor.cpp:3038]
#10: nsCSSFrameConstructor::ConstructDocElementFrame(mozilla::dom::Element*, nsILayoutHistoryState*) [layout/base/nsCSSFrameConstructor.cpp:2539]
#11: nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [layout/base/nsCSSFrameConstructor.cpp:8111]
#12: nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind) [layout/base/nsCSSFrameConstructor.cpp:8001]
#13: mozilla::PresShell::Initialize(int, int) [mfbt/RefPtr.h:287]
#14: mozilla::dom::XULDocument::StartLayout() [dom/xul/XULDocument.cpp:1934]
#15: mozilla::dom::XULDocument::DoneWalking() [dom/xul/XULDocument.cpp:3026]
#16: mozilla::dom::XULDocument::ResumeWalk() [xpcom/base/nsCOMPtr.h:424]
#17: mozilla::dom::XULDocument::EndLoad() [dom/xul/XULDocument.cpp:567]
#18: XULContentSinkImpl::DidBuildModel(bool) [xpcom/base/nsCOMPtr.h:396]
#19: nsParser::DidBuildModel(nsresult) [parser/htmlparser/nsParser.cpp:499]
#20: nsParser::ResumeParse(bool, bool, bool) [parser/htmlparser/nsParser.cpp:1101]
#21: nsParser::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [parser/htmlparser/nsParser.cpp:1475]
#22: nsDocumentOpenInfo::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:424]
#23: nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#24: non-virtual thunk to nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [modules/libjar/nsJARChannel.cpp:1105]
#25: nsInputStreamPump::OnStateStop() [xpcom/threads/RecursiveMutex.h:118]
#26: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:435]
#27: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#28: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#29: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#30: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#08: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#09: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#10: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#11: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#12: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#13: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#14: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#15: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#16: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#17: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#18: <name omitted> [js/src/vm/Interpreter.cpp:550]
#19: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#20: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#21: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#22: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#25: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3076]
#26: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#27: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#28: <name omitted> [js/src/vm/Interpreter.cpp:550]
#29: js::jit::InterpretResume(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [mfbt/GuardObjects.h:119]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:806]
#05: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#06: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#07: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#08: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#09: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#10: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#11: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#12: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#13: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#14: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#15: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#16: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#17: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#18: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#19: <name omitted> [js/src/vm/Interpreter.cpp:550]
#20: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#21: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#22: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#23: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#26: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3076]
#27: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#28: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#29: <name omitted> [js/src/vm/Interpreter.cpp:550]
#30: js::jit::InterpretResume(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [mfbt/GuardObjects.h:119]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractIDWithError::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:293]
#08: nsCOMPtr_base::assign_from_gs_contractid_with_error(nsGetServiceByContractIDWithError const&, nsID const&) [xpcom/base/nsCOMPtr.cpp:106]
#09: nsAppStartupNotifier::Observe(nsISupports*, char const*, char16_t const*) [xpcom/base/nsCOMPtr.h:1029]
#10: XRE_InitEmbedding2(nsIFile*, nsIFile*, nsIDirectoryServiceProvider*) [xpcom/base/nsCOMPtr.h:424]
#11: mozilla::ipc::ScopedXREEmbed::Start() [ipc/glue/ScopedXREEmbed.cpp:98]
#12: mozilla::dom::ContentProcess::Init(int, char**) [xpcom/base/nsCOMPtr.h:780]
#13: XRE_InitChildProcess(int, char**, XREChildData const*) [toolkit/xre/nsEmbedFunctions.cpp:671]
#14: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::LoadAndRegisterSheet(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:173]
#06: mozilla::dom::ContentChild::RecvLoadAndRegisterSheet(mozilla::ipc::URIParams const&, unsigned int const&) [xpcom/base/nsCOMPtr.h:424]
#07: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::6757]
#08: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#09: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#10: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#11: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#12: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#13: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#14: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#15: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#16: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#17: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#18: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#19: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#20: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::LoadAndRegisterSheet(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:173]
#06: mozilla::dom::ContentChild::RecvLoadAndRegisterSheet(mozilla::ipc::URIParams const&, unsigned int const&) [xpcom/base/nsCOMPtr.h:424]
#07: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::6757]
#08: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#09: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#10: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#11: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#12: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#13: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#14: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#15: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#16: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#17: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#18: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#19: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#20: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: mozilla::CubebUtils::InitBrandName() [dom/media/CubebUtils.cpp:367]
#04: mozilla::detail::RunnableFunction<void (*)()>::Run() [xpcom/threads/nsThreadUtils.h:528]
#05: mozilla::EventTargetWrapper::Runner::Run() [xpcom/threads/AbstractThread.cpp:154]
#06: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#07: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#08: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#11: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#12: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#13: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#14: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsPrefBranch::GetDefaultFromPropertiesFile(char const*, nsTSubstring<char16_t>&) [modules/libpref/nsPrefBranch.cpp:970]
#04: nsPrefBranch::GetComplexValue(char const*, nsID const&, void**) [modules/libpref/nsPrefBranch.cpp:356]
#05: mozilla::Preferences::GetLocalizedString(char const*, nsTSubstring<char16_t>&) [modules/libpref/Preferences.cpp:1795]
#06: mozilla::Preferences::GetLocalizedCString(char const*, nsTSubstring<char>&) [modules/libpref/Preferences.cpp:1783]
#07: mozilla::dom::IndexedDatabaseManager::Init() [dom/indexedDB/IndexedDatabaseManager.cpp:436]
#08: mozilla::dom::IndexedDatabaseManager::GetOrCreate() [dom/indexedDB/IndexedDatabaseManager.cpp:353]
#09: mozilla::dom::workers::WorkerPrivate::GetLoadInfo(JSContext*, nsPIDOMWindowInner*, mozilla::dom::workers::WorkerPrivate*, nsTSubstring<char16_t> const&, bool, mozilla::dom::workers::WorkerPrivate::LoadGroupBehavior, mozilla::dom::WorkerType, mozilla::dom::workers::WorkerLoadInfo*) [xpcom/base/nsDebug.h:55]
#10: mozilla::dom::workers::WorkerPrivate::Constructor(JSContext*, nsTSubstring<char16_t> const&, bool, mozilla::dom::WorkerType, nsTSubstring<char16_t> const&, nsTSubstring<char> const&, mozilla::dom::workers::WorkerLoadInfo*, mozilla::ErrorResult&) [dom/bindings/ErrorResult.h:358]
#11: mozilla::dom::workers::ChromeWorkerPrivate::Constructor(mozilla::dom::GlobalObject const&, nsTSubstring<char16_t> const&, mozilla::ErrorResult&) [dom/workers/WorkerPrivate.cpp:4648]
#12: mozilla::dom::ChromeWorkerBinding::_constructor(JSContext*, unsigned int, JS::Value*) [mfbt/AlreadyAddRefed.h:143]
#13: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#14: js::CallJSNativeConstructor(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:324]
#15: InternalConstruct(JSContext*, js::AnyConstructArgs const&) [js/src/vm/Interpreter.cpp:589]
#16: js::ConstructFromStack(JSContext*, JS::CallArgs const&) [js/src/vm/Interpreter.cpp:615]
#17: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3068]
#18: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#19: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#20: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#21: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#22: bool NativeGetPropertyInline<(js::AllowGC)1>(JSContext*, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<jsid, (js::AllowGC)1>::HandleType, IsNameLookup, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2377]
#23: js::GetProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, js::PropertyName*, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#24: js::GetProperty(JSContext*, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#25: Interpret(JSContext*, js::RunState&) [js/public/RootingAPI.h:835]
#26: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#27: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#28: <name omitted> [js/src/vm/Interpreter.cpp:550]
#29: js::CallSelfHostedFunction(JSContext*, JS::Handle<js::PropertyName*>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) [js/src/vm/SelfHosting.cpp:1784]
#30: AsyncFunctionResume(JSContext*, JS::Handle<js::PromiseObject*>, JS::Handle<JS::Value>, ResumeKind, JS::Handle<JS::Value>) [js/src/vm/AsyncFunction.cpp:192]
#31: PromiseReactionJob(JSContext*, unsigned int, JS::Value*) [js/src/builtin/Promise.cpp:1094]
#32: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#33: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#34: <name omitted> [js/src/vm/Interpreter.cpp:550]
#35: JS::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) [js/src/jsapi.cpp:3021]
#36: mozilla::dom::PromiseJobCallback::Call(JSContext*, JS::Handle<JS::Value>, mozilla::ErrorResult&) [s3:gecko-generated-sources-l1:1ac589ef3f4415b1cad140c5945f932e3fda630e97fc7dc01bdf6d306292c6c729b28d3a34f0a84b44362e7d528cc9d9627990562f56625771b02d265e090411/dom/bindings/PromiseBinding.cpp::21]
#37: mozilla::dom::PromiseJobCallback::Call(mozilla::ErrorResult&, char const*, mozilla::dom::CallbackObject::ExceptionHandling, JSCompartment*) [s3:gecko-generated-sources-l1:b4f3b4deaa975bd9f9a7a45c24b53dd1d24f707951e2b563dea1a56e9905e156ca2d24d3a6123e7e3ccf3c663f65339cbe6ee3dc1f98154c1a3c47a4d8f1d0d0/dist/include/mozilla/dom/PromiseBinding.h::89]
#38: mozilla::PromiseJobRunnable::Run() [dom/bindings/ErrorResult.h:600]
#39: mozilla::dom::Promise::PerformMicroTaskCheckpoint() [dom/promise/Promise.cpp:532]
#40: XPCJSContext::BeforeProcessTask(bool) [js/xpconnect/src/XPCJSContext.cpp:1174]
#41: nsThread::ProcessNextEvent(bool, bool*) [mfbt/RefPtr.h:317]
#42: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#43: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: mozilla::CubebUtils::InitBrandName() [dom/media/CubebUtils.cpp:367]
#04: mozilla::detail::RunnableFunction<void (*)()>::Run() [xpcom/threads/nsThreadUtils.h:528]
#05: mozilla::EventTargetWrapper::Runner::Run() [xpcom/threads/AbstractThread.cpp:154]
#06: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#07: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#08: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsStringBundle::GetStringFromAUTF8Name(nsTSubstring<char> const&, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:148]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsPermissionManager::ImportDefaults() [extensions/cookie/nsPermissionManager.cpp:2867]
#02: nsPermissionManager::InitDB(bool) [extensions/cookie/nsPermissionManager.cpp:1579]
#03: nsPermissionManager::Init() [xpcom/base/nsCOMPtr.h:424]
#04: nsPermissionManager::GetXPCOMSingleton() [extensions/cookie/nsPermissionManager.cpp:908]
#05: nsIPermissionManagerConstructor(nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:72]
#06: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1086]
#07: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#08: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#09: mozilla::services::GetPermissionManager() [xpcom/base/nsCOMPtr.h:1215]
#10: TestSitePerm(nsIPrincipal*, char const*, unsigned int, bool) [mfbt/AlreadyAddRefed.h:121]
#11: nsContentUtils::AllowXULXBLForPrincipal(nsIPrincipal*) [dom/base/nsContentUtils.cpp:3968]
#12: XPCWrappedNativeScope::XPCWrappedNativeScope(JSContext*, JS::Handle<JSObject*>) [js/xpconnect/src/XPCWrappedNativeScope.cpp:86]
#13: xpc::CreateGlobalObject(JSContext*, JSClass const*, nsIPrincipal*, JS::CompartmentOptions&) [js/public/Class.h:938]
#14: mozilla::dom::SimpleGlobalObject::Create(mozilla::dom::SimpleGlobalObject::GlobalType, JS::Handle<JS::Value>) [js/public/RootingAPI.h:850]
#15: mozilla::dom::WidevineCDMManifest::Init(nsTSubstring<char16_t> const&) [s3:gecko-generated-sources-l1:0c065936d70d001befed7c9ed2a2bbe11169ad8eb18efa1d74aa64b775f90add1ded5cca335b6bd5ffa6f2b37fc1aec262b344fb5a4c9207e81f4ffdb9d2ad2b/dom/bindings/WidevineCDMManifestBinding.cpp::204]
#16: mozilla::gmp::GMPParent::ParseChromiumManifest(nsTSubstring<char16_t> const&) [dom/media/gmp/GMPParent.cpp:737]
#17: mozilla::detail::ProxyRunnable<mozilla::MozPromise<bool, nsresult, false>, RefPtr<mozilla::MozPromise<bool, nsresult, false> > (mozilla::gmp::GMPParent::*)(nsTSubstring<char16_t> const&), mozilla::gmp::GMPParent, StoreCopyPassByRRef<NS_ConvertUTF8toUTF16> >::Run() [xpcom/base/nsAutoPtr.h:38]
#18: mozilla::EventTargetWrapper::Runner::Run() [xpcom/threads/AbstractThread.cpp:154]
#19: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#20: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#21: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsNSSComponent::GetPIPNSSBundleString(char const*, nsTSubstring<char16_t>&) [security/manager/ssl/nsNSSComponent.cpp:261]
#04: nsNSSComponent::ConfigureInternalPKCS11Token() [security/manager/ssl/nsNSSComponent.cpp:1365]
#05: nsNSSComponent::InitializeNSS() [xpcom/string/nsTString.h:569]
#06: nsNSSComponent::Init() [security/manager/ssl/nsNSSComponent.cpp:2273]
#07: (anonymous namespace)::nsNSSComponentConstructor(nsISupports*, nsID const&, void**) [security/manager/ssl/nsNSSModule.cpp:132]
#08: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1086]
#09: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#10: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#11: nsCOMPtr_base::assign_from_gs_contractid(nsGetServiceByContractID, nsID const&) [xpcom/base/nsCOMPtr.cpp:95]
#12: EnsureNSSInitializedChromeOrContent() [security/manager/ssl/nsNSSComponent.cpp:116]
#13: nsresult mozilla::psm::Constructor<nsNSSCertificateDB, (nsresult (nsNSSCertificateDB::*)())0, (mozilla::psm::ProcessRestriction)0, (mozilla::psm::ThreadRestriction)1>(nsISupports*, nsID const&, void**) [security/manager/ssl/nsNSSModule.cpp:94]
#14: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1003]
#15: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#16: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:347]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:349]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsStringBundle::FormatStringFromName(char const*, char16_t const**, unsigned int, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:204]
#04: mozilla::css::ErrorReporter::ReportUnexpected(char const*, nsCSSToken const&) [layout/style/ErrorReporter.cpp:350]
#05: (anonymous namespace)::CSSParserImpl::ParseColor(nsCSSValue&) [layout/style/nsCSSParser.cpp:3020]
#06: (anonymous namespace)::CSSParserImpl::ParseVariant(nsCSSValue&, unsigned int, nsCSSProps::KTableEntry const*) [layout/style/nsCSSParser.cpp:7796]
#07: (anonymous namespace)::CSSParserImpl::ParseChoice(nsCSSValue*, nsCSSPropertyID const*, int) [layout/style/nsCSSParser.cpp:11052]
#08: (anonymous namespace)::CSSParserImpl::ParsePropertyByFunction(nsCSSPropertyID) [layout/style/nsCSSParser.cpp:15302]
#09: (anonymous namespace)::CSSParserImpl::ParseProperty(nsCSSPropertyID) [layout/style/nsCSSParser.cpp:11436]
#10: (anonymous namespace)::CSSParserImpl::ParseDeclaration(mozilla::css::Declaration*, unsigned int, bool, bool*, (anonymous namespace)::CSSParserImpl::nsCSSContextType) [layout/style/nsCSSParser.cpp:7163]
#11: (anonymous namespace)::CSSParserImpl::ParseDeclarationBlock(unsigned int, (anonymous namespace)::CSSParserImpl::nsCSSContextType) [layout/style/nsCSSParser.cpp:6536]
#12: (anonymous namespace)::CSSParserImpl::ParseRuleSet(void (*)(mozilla::css::Rule*, void*), void*, bool) [mfbt/AlreadyAddRefed.h:121]
#13: nsCSSParser::ParseSheet(nsTSubstring<char16_t> const&, nsIURI*, nsIURI*, nsIPrincipal*, unsigned int, mozilla::css::LoaderReusableStyleSheets*) [layout/style/nsCSSParser.cpp:1645]
#14: mozilla::css::Loader::ParseSheet(nsTSubstring<char16_t> const&, mozilla::Span<unsigned char const, 18446744073709551615ul>, mozilla::css::SheetLoadData*, bool&) [layout/style/Loader.cpp:1640]
#15: mozilla::css::SheetLoadData::OnStreamComplete(nsIUnicharStreamLoader*, nsISupports*, nsresult, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:622]
#16: nsUnicharStreamLoader::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#17: nsSyncLoadService::PushSyncStreamToListener(nsIInputStream*, nsIStreamListener*, nsIChannel*) [xpcom/base/nsCOMPtr.h:424]
#18: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1405]
#19: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#20: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#21: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#22: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#23: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:349]
#24: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#25: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#26: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#27: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#28: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#29: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#30: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#31: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:351]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:353]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:355]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:360]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::ScrollbarsSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2387]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::NumberControlSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2403]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::FormsSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2408]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::NoScriptSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2435]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::UASheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2461]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::RegisterFromEnumerator(nsICategoryManager*, char const*, nsISimpleEnumerator*, unsigned int) [xpcom/base/nsCOMPtr.h:424]
#06: nsStyleSheetService::Init() [xpcom/base/nsCOMPtr.h:800]
#07: nsStyleSheetServiceConstructor(nsISupports*, nsID const&, void**) [layout/build/nsLayoutModule.cpp:466]
#08: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1086]
#09: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#10: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#11: nsStyleSheetService::GetInstance() [xpcom/base/nsCOMPtr.h:1215]
#12: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2465]
#13: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#14: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#15: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#16: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#17: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#18: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#08: mozilla::dom::XULDocument::ApplyPersistentAttributes() [xpcom/base/nsCOMPtr.h:1215]
#09: mozilla::dom::XULDocument::ResumeWalk() [dom/xul/XULDocument.cpp:2968]
#10: mozilla::dom::XULDocument::EndLoad() [dom/xul/XULDocument.cpp:567]
#11: XULContentSinkImpl::DidBuildModel(bool) [xpcom/base/nsCOMPtr.h:396]
#12: nsParser::DidBuildModel(nsresult) [parser/htmlparser/nsParser.cpp:499]
#13: nsParser::ResumeParse(bool, bool, bool) [parser/htmlparser/nsParser.cpp:1101]
#14: nsParser::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [parser/htmlparser/nsParser.cpp:1475]
#15: nsDocumentOpenInfo::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:424]
#16: nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#17: non-virtual thunk to nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [modules/libjar/nsJARChannel.cpp:1105]
#18: nsInputStreamPump::OnStateStop() [xpcom/threads/RecursiveMutex.h:118]
#19: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:435]
#20: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#21: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#22: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#23: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::AddFCItemsForAnonymousContent(nsFrameConstructorState&, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>&, nsCSSFrameConstructor::FrameConstructionItemList&, unsigned int) [layout/base/nsCSSFrameConstructor.cpp:11223]
#08: nsCSSFrameConstructor::BeginBuildingScrollFrame(nsFrameConstructorState&, nsIContent*, nsStyleContext*, nsContainerFrame*, nsAtom*, bool, nsContainerFrame*&) [layout/base/nsCSSFrameConstructor.cpp:4742]
#09: nsCSSFrameConstructor::SetUpDocElementContainingBlock(nsIContent*) [layout/base/nsCSSFrameConstructor.cpp:3038]
#10: nsCSSFrameConstructor::ConstructDocElementFrame(mozilla::dom::Element*, nsILayoutHistoryState*) [layout/base/nsCSSFrameConstructor.cpp:2539]
#11: nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [layout/base/nsCSSFrameConstructor.cpp:8111]
#12: nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind) [layout/base/nsCSSFrameConstructor.cpp:8001]
#13: mozilla::PresShell::Initialize(int, int) [mfbt/RefPtr.h:287]
#14: mozilla::dom::XULDocument::StartLayout() [dom/xul/XULDocument.cpp:1934]
#15: mozilla::dom::XULDocument::DoneWalking() [dom/xul/XULDocument.cpp:3026]
#16: mozilla::dom::XULDocument::ResumeWalk() [xpcom/base/nsCOMPtr.h:424]
#17: mozilla::dom::XULDocument::EndLoad() [dom/xul/XULDocument.cpp:567]
#18: XULContentSinkImpl::DidBuildModel(bool) [xpcom/base/nsCOMPtr.h:396]
#19: nsParser::DidBuildModel(nsresult) [parser/htmlparser/nsParser.cpp:499]
#20: nsParser::ResumeParse(bool, bool, bool) [parser/htmlparser/nsParser.cpp:1101]
#21: nsParser::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [parser/htmlparser/nsParser.cpp:1475]
#22: nsDocumentOpenInfo::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:424]
#23: nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#24: non-virtual thunk to nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [modules/libjar/nsJARChannel.cpp:1105]
#25: nsInputStreamPump::OnStateStop() [xpcom/threads/RecursiveMutex.h:118]
#26: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:435]
#27: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#28: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#29: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#30: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#08: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#09: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#10: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#11: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#12: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#13: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#14: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#15: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#16: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#17: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#18: <name omitted> [js/src/vm/Interpreter.cpp:550]
#19: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#20: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#21: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#22: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#25: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3076]
#26: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#27: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#28: <name omitted> [js/src/vm/Interpreter.cpp:550]
#29: js::jit::InterpretResume(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [mfbt/GuardObjects.h:119]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:806]
#05: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#06: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#07: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#08: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#09: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#10: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#11: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#12: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#13: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#14: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#15: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#16: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#17: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#18: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#19: <name omitted> [js/src/vm/Interpreter.cpp:550]
#20: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#21: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#22: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#23: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#26: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3076]
#27: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#28: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#29: <name omitted> [js/src/vm/Interpreter.cpp:550]
#30: js::jit::InterpretResume(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [mfbt/GuardObjects.h:119]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#08: mozilla::dom::ContentParent::GetNewOrUsedBrowserProcess(nsTSubstring<char16_t> const&, mozilla::hal::ProcessPriority, mozilla::dom::ContentParent*, bool) [xpcom/base/nsCOMPtr.h:1215]
#09: mozilla::dom::ContentParent::CreateBrowser(mozilla::dom::TabContext const&, mozilla::dom::Element*, mozilla::dom::ContentParent*, mozilla::dom::TabParent*, unsigned long long) [mfbt/AlreadyAddRefed.h:121]
#10: nsFrameLoader::TryRemoteBrowser() [dom/base/nsFrameLoader.cpp:3223]
#11: nsFrameLoader::ShowRemoteFrame(mozilla::gfx::IntSizeTyped<mozilla::ScreenPixel> const&, nsSubDocumentFrame*) [dom/base/nsFrameLoader.cpp:1394]
#12: nsFrameLoader::Show(int, int, int, int, nsSubDocumentFrame*) [dom/base/nsFrameLoader.cpp:1251]
#13: nsSubDocumentFrame::ShowViewer() [layout/generic/nsIFrame.h:4527]
#14: AsyncFrameInit::Run() [tools/profiler/public/GeckoProfiler.h:596]
#15: nsContentUtils::RemoveScriptBlocker() [xpcom/base/nsCOMPtr.h:396]
#16: nsDocument::EndUpdate(unsigned int) [dom/base/nsDocument.cpp:5376]
#17: mozilla::dom::XULDocument::EndUpdate(unsigned int) [dom/xul/XULDocument.cpp:3196]
#18: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/mozAutoDocUpdate.h:40]
#19: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#20: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#21: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#22: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#23: <name omitted> [js/src/vm/Interpreter.cpp:550]
#24: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#25: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#26: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#27: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#28: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#29: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#30: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3076]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#33: <name omitted> [js/src/vm/Interpreter.cpp:550]
#34: js::jit::InterpretResume(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [mfbt/GuardObjects.h:119]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsJSCID::CreateInstance(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:661]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractIDWithError::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:293]
#08: nsCOMPtr_base::assign_from_gs_contractid_with_error(nsGetServiceByContractIDWithError const&, nsID const&) [xpcom/base/nsCOMPtr.cpp:106]
#09: nsAppStartupNotifier::Observe(nsISupports*, char const*, char16_t const*) [xpcom/base/nsCOMPtr.h:1029]
#10: XRE_InitEmbedding2(nsIFile*, nsIFile*, nsIDirectoryServiceProvider*) [xpcom/base/nsCOMPtr.h:424]
#11: mozilla::ipc::ScopedXREEmbed::Start() [ipc/glue/ScopedXREEmbed.cpp:98]
#12: mozilla::dom::ContentProcess::Init(int, char**) [xpcom/base/nsCOMPtr.h:780]
#13: XRE_InitChildProcess(int, char**, XREChildData const*) [toolkit/xre/nsEmbedFunctions.cpp:671]
#14: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::LoadAndRegisterSheet(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:173]
#06: mozilla::dom::ContentChild::RecvLoadAndRegisterSheet(mozilla::ipc::URIParams const&, unsigned int const&) [xpcom/base/nsCOMPtr.h:424]
#07: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::6757]
#08: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#09: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#10: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#11: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#12: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#13: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#14: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#15: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#16: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#17: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#18: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#19: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#20: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::LoadAndRegisterSheet(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:173]
#06: mozilla::dom::ContentChild::RecvLoadAndRegisterSheet(mozilla::ipc::URIParams const&, unsigned int const&) [xpcom/base/nsCOMPtr.h:424]
#07: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::6757]
#08: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#09: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#10: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#11: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#12: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#13: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#14: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#15: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#16: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#17: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#18: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#19: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#20: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#08: ChromeTooltipListener::ChromeTooltipListener(nsWebBrowser*, nsIWebBrowserChrome*) [xpcom/base/nsCOMPtr.h:1215]
#09: nsDocShellTreeOwner::AddChromeListeners() [mfbt/RefPtr.h:193]
#10: nsWebBrowser::Create() [xpcom/base/nsAutoPtr.h:38]
#11: mozilla::dom::TabChild::Init() [dom/ipc/TabChild.cpp:589]
#12: mozilla::dom::nsIContentChild::RecvPBrowserConstructor(mozilla::dom::PBrowserChild*, mozilla::dom::IdType<mozilla::dom::TabParent> const&, mozilla::dom::IdType<mozilla::dom::TabParent> const&, mozilla::dom::IPCTabContext const&, unsigned int const&, mozilla::dom::IdType<mozilla::dom::ContentParent> const&, bool const&) [xpcom/base/nsDebug.h:55]
#13: mozilla::dom::ContentChild::RecvPBrowserConstructor(mozilla::dom::PBrowserChild*, mozilla::dom::IdType<mozilla::dom::TabParent> const&, mozilla::dom::IdType<mozilla::dom::TabParent> const&, mozilla::dom::IPCTabContext const&, unsigned int const&, mozilla::dom::IdType<mozilla::dom::ContentParent> const&, bool const&) [dom/ipc/ContentChild.cpp:1838]
#14: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4969]
#15: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#16: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#17: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#18: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#19: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#20: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#21: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#22: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#23: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#24: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#25: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#26: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#27: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#28: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsMessageManagerScriptExecutor::TryCacheLoadAndCompileScript(nsTSubstring<char16_t> const&, bool, bool, JS::MutableHandle<JSScript*>) [dom/base/nsFrameMessageManager.cpp:1638]
#02: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [js/public/RootingAPI.h:426]
#03: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#04: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#05: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#06: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#07: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#08: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#09: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#10: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#11: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#12: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#13: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#14: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#15: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#16: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#17: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#18: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#19: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsMessageManagerScriptExecutor::TryCacheLoadAndCompileScript(nsTSubstring<char16_t> const&, bool, bool, JS::MutableHandle<JSScript*>) [dom/base/nsFrameMessageManager.cpp:1638]
#02: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [js/public/RootingAPI.h:426]
#03: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#04: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#05: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#06: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#07: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#08: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#09: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#10: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#11: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#12: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#13: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#14: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#15: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#16: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#17: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#18: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#19: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:347]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:349]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:351]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:353]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:355]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::ScrollbarsSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2387]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::NumberControlSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2403]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::FormsSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2408]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::NoScriptSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2435]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::UASheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2461]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: mozilla::CubebUtils::InitBrandName() [dom/media/CubebUtils.cpp:367]
#04: mozilla::detail::RunnableFunction<void (*)()>::Run() [xpcom/threads/nsThreadUtils.h:528]
#05: mozilla::EventTargetWrapper::Runner::Run() [xpcom/threads/AbstractThread.cpp:154]
#06: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#07: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#08: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#11: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#12: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#13: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#14: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsPrefBranch::GetDefaultFromPropertiesFile(char const*, nsTSubstring<char16_t>&) [modules/libpref/nsPrefBranch.cpp:970]
#04: nsPrefBranch::GetComplexValue(char const*, nsID const&, void**) [modules/libpref/nsPrefBranch.cpp:356]
#05: mozilla::Preferences::GetLocalizedString(char const*, nsTSubstring<char16_t>&) [modules/libpref/Preferences.cpp:1795]
#06: mozilla::Preferences::GetLocalizedCString(char const*, nsTSubstring<char>&) [modules/libpref/Preferences.cpp:1783]
#07: nsHtml5StreamParser::nsHtml5StreamParser(nsHtml5TreeOpExecutor*, nsHtml5Parser*, eParserMode) [xpcom/string/nsTStringRepr.h:159]
#08: nsHtml5Parser::MarkAsNotScriptCreated(char const*) [parser/html/nsHtml5Parser.cpp:606]
#09: nsHTMLDocument::StartDocumentLoad(char const*, nsIChannel*, nsILoadGroup*, nsISupports*, nsIStreamListener**, bool, nsIContentSink*) [dom/html/nsHTMLDocument.cpp:604]
#10: nsContentDLF::CreateDocument(char const*, nsIChannel*, nsILoadGroup*, nsIDocShell*, nsID const&, nsIStreamListener**, nsIContentViewer**) [layout/build/nsContentDLF.cpp:364]
#11: nsContentDLF::CreateInstance(char const*, nsIChannel*, nsILoadGroup*, nsTSubstring<char> const&, nsIDocShell*, nsISupports*, nsIStreamListener**, nsIContentViewer**) [layout/build/nsContentDLF.cpp:186]
#12: nsDocShell::NewContentViewerObj(nsTSubstring<char> const&, nsIRequest*, nsILoadGroup*, nsIStreamListener**, nsIContentViewer**) [docshell/base/nsDocShell.cpp:9414]
#13: nsDocShell::CreateContentViewer(nsTSubstring<char> const&, nsIRequest*, nsIStreamListener**) [docshell/base/nsDocShell.cpp:9205]
#14: nsDSURIContentListener::DoContent(nsTSubstring<char> const&, bool, nsIRequest*, nsIStreamListener**, bool*) [docshell/base/nsDSURIContentListener.cpp:114]
#15: nsDocumentOpenInfo::TryContentListener(nsIURIContentListener*, nsIChannel*) [uriloader/base/nsURILoader.cpp:739]
#16: nsDocumentOpenInfo::DispatchContent(nsIRequest*, nsISupports*) [uriloader/base/nsURILoader.cpp:417]
#17: nsDocumentOpenInfo::OnStartRequest(nsIRequest*, nsISupports*) [uriloader/base/nsURILoader.cpp:295]
#18: nsBaseChannel::OnStartRequest(nsIRequest*, nsISupports*) [netwerk/base/nsBaseChannel.cpp:859]
#19: nsInputStreamPump::OnStateStart() [netwerk/base/nsInputStreamPump.cpp:517]
#20: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:420]
#21: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#22: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#23: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#24: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#25: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#26: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#27: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#28: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#29: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#30: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#31: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::AddFCItemsForAnonymousContent(nsFrameConstructorState&, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>&, nsCSSFrameConstructor::FrameConstructionItemList&, unsigned int) [layout/base/nsCSSFrameConstructor.cpp:11223]
#08: nsCSSFrameConstructor::BeginBuildingScrollFrame(nsFrameConstructorState&, nsIContent*, nsStyleContext*, nsContainerFrame*, nsAtom*, bool, nsContainerFrame*&) [layout/base/nsCSSFrameConstructor.cpp:4742]
#09: nsCSSFrameConstructor::SetUpDocElementContainingBlock(nsIContent*) [layout/base/nsCSSFrameConstructor.cpp:3038]
#10: nsCSSFrameConstructor::ConstructDocElementFrame(mozilla::dom::Element*, nsILayoutHistoryState*) [layout/base/nsCSSFrameConstructor.cpp:2539]
#11: nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [layout/base/nsCSSFrameConstructor.cpp:8111]
#12: nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind) [layout/base/nsCSSFrameConstructor.cpp:8001]
#13: mozilla::PresShell::Initialize(int, int) [mfbt/RefPtr.h:287]
#14: nsContentSink::StartLayout(bool) [dom/base/nsContentSink.cpp:1286]
#15: nsHtml5TreeOpExecutor::StartLayout(bool*) [mfbt/RefPtr.h:311]
#16: nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor*, nsIContent**, bool*) [parser/html/nsHtml5TreeOperation.cpp:1146]
#17: nsHtml5TreeOpExecutor::RunFlushLoop() [parser/html/nsHtml5TreeOpExecutor.cpp:461]
#18: nsHtml5ExecutorFlusher::Run() [parser/html/nsHtml5StreamParser.cpp:132]
#19: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#20: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#21: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#22: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#23: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#24: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#25: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#26: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#27: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#28: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x321ee
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::AddFCItemsForAnonymousContent(nsFrameConstructorState&, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>&, nsCSSFrameConstructor::FrameConstructionItemList&, unsigned int) [layout/base/nsCSSFrameConstructor.cpp:11223]
#08: nsCSSFrameConstructor::BeginBuildingScrollFrame(nsFrameConstructorState&, nsIContent*, nsStyleContext*, nsContainerFrame*, nsAtom*, bool, nsContainerFrame*&) [layout/base/nsCSSFrameConstructor.cpp:4742]
#09: nsCSSFrameConstructor::SetUpDocElementContainingBlock(nsIContent*) [layout/base/nsCSSFrameConstructor.cpp:3038]
#10: nsCSSFrameConstructor::ConstructDocElementFrame(mozilla::dom::Element*, nsILayoutHistoryState*) [layout/base/nsCSSFrameConstructor.cpp:2539]
#11: nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [layout/base/nsCSSFrameConstructor.cpp:8111]
#12: nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind) [layout/base/nsCSSFrameConstructor.cpp:8001]
#13: mozilla::PresShell::Initialize(int, int) [mfbt/RefPtr.h:287]
#14: mozilla::dom::XULDocument::StartLayout() [dom/xul/XULDocument.cpp:1934]
#15: mozilla::dom::XULDocument::DoneWalking() [dom/xul/XULDocument.cpp:3026]
#16: mozilla::dom::XULDocument::ResumeWalk() [xpcom/base/nsCOMPtr.h:424]
#17: mozilla::dom::XULDocument::EndLoad() [dom/xul/XULDocument.cpp:567]
#18: XULContentSinkImpl::DidBuildModel(bool) [xpcom/base/nsCOMPtr.h:396]
#19: nsParser::DidBuildModel(nsresult) [parser/htmlparser/nsParser.cpp:499]
#20: nsParser::ResumeParse(bool, bool, bool) [parser/htmlparser/nsParser.cpp:1101]
#21: nsParser::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [parser/htmlparser/nsParser.cpp:1475]
#22: nsDocumentOpenInfo::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:424]
#23: nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#24: non-virtual thunk to nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [modules/libjar/nsJARChannel.cpp:1105]
#25: nsInputStreamPump::OnStateStop() [xpcom/threads/RecursiveMutex.h:118]
#26: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:435]
#27: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#28: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#29: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#30: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#08: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#09: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#10: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#11: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#12: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#13: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#14: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#15: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#16: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#17: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#18: <name omitted> [js/src/vm/Interpreter.cpp:550]
#19: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#20: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#21: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#22: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#25: js::jit::DoCallFallback(JSContext*, js::jit::BaselineFrame*, js::jit::ICCall_Fallback*, unsigned int, JS::Value*, JS::MutableHandle<JS::Value>) [js/src/jit/BaselineIC.cpp:2512]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:806]
#05: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#06: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#07: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#08: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#09: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#10: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#11: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#12: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#13: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#14: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#15: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#16: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#17: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#18: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#19: <name omitted> [js/src/vm/Interpreter.cpp:550]
#20: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#21: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#22: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#23: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#26: js::jit::DoCallFallback(JSContext*, js::jit::BaselineFrame*, js::jit::ICCall_Fallback*, unsigned int, JS::Value*, JS::MutableHandle<JS::Value>) [js/src/jit/BaselineIC.cpp:2512]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractIDWithError::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:293]
#08: nsCOMPtr_base::assign_from_gs_contractid_with_error(nsGetServiceByContractIDWithError const&, nsID const&) [xpcom/base/nsCOMPtr.cpp:106]
#09: nsAppStartupNotifier::Observe(nsISupports*, char const*, char16_t const*) [xpcom/base/nsCOMPtr.h:1029]
#10: XRE_InitEmbedding2(nsIFile*, nsIFile*, nsIDirectoryServiceProvider*) [xpcom/base/nsCOMPtr.h:424]
#11: mozilla::ipc::ScopedXREEmbed::Start() [ipc/glue/ScopedXREEmbed.cpp:98]
#12: mozilla::dom::ContentProcess::Init(int, char**) [xpcom/base/nsCOMPtr.h:780]
#13: XRE_InitChildProcess(int, char**, XREChildData const*) [toolkit/xre/nsEmbedFunctions.cpp:671]
#14: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::LoadAndRegisterSheet(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:173]
#06: mozilla::dom::ContentChild::RecvLoadAndRegisterSheet(mozilla::ipc::URIParams const&, unsigned int const&) [xpcom/base/nsCOMPtr.h:424]
#07: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::6757]
#08: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#09: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#10: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#11: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#12: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#13: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#14: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#15: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#16: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#17: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#18: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#19: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#20: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::LoadAndRegisterSheet(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:173]
#06: mozilla::dom::ContentChild::RecvLoadAndRegisterSheet(mozilla::ipc::URIParams const&, unsigned int const&) [xpcom/base/nsCOMPtr.h:424]
#07: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::6757]
#08: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#09: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#10: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#11: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#12: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#13: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#14: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#15: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#16: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#17: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#18: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#19: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#20: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: mozilla::CubebUtils::InitBrandName() [dom/media/CubebUtils.cpp:367]
#04: mozilla::detail::RunnableFunction<void (*)()>::Run() [xpcom/threads/nsThreadUtils.h:528]
#05: mozilla::EventTargetWrapper::Runner::Run() [xpcom/threads/AbstractThread.cpp:154]
#06: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#07: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#08: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#11: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#12: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#13: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#14: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::AddFCItemsForAnonymousContent(nsFrameConstructorState&, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>&, nsCSSFrameConstructor::FrameConstructionItemList&, unsigned int) [layout/base/nsCSSFrameConstructor.cpp:11223]
#08: nsCSSFrameConstructor::BeginBuildingScrollFrame(nsFrameConstructorState&, nsIContent*, nsStyleContext*, nsContainerFrame*, nsAtom*, bool, nsContainerFrame*&) [layout/base/nsCSSFrameConstructor.cpp:4742]
#09: nsCSSFrameConstructor::SetUpDocElementContainingBlock(nsIContent*) [layout/base/nsCSSFrameConstructor.cpp:3038]
#10: nsCSSFrameConstructor::ConstructDocElementFrame(mozilla::dom::Element*, nsILayoutHistoryState*) [layout/base/nsCSSFrameConstructor.cpp:2539]
#11: nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [layout/base/nsCSSFrameConstructor.cpp:8111]
#12: nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind) [layout/base/nsCSSFrameConstructor.cpp:8001]
#13: mozilla::PresShell::Initialize(int, int) [mfbt/RefPtr.h:287]
#14: mozilla::dom::XULDocument::StartLayout() [dom/xul/XULDocument.cpp:1934]
#15: mozilla::dom::XULDocument::DoneWalking() [dom/xul/XULDocument.cpp:3026]
#16: mozilla::dom::XULDocument::ResumeWalk() [xpcom/base/nsCOMPtr.h:424]
#17: mozilla::dom::XULDocument::EndLoad() [dom/xul/XULDocument.cpp:567]
#18: XULContentSinkImpl::DidBuildModel(bool) [xpcom/base/nsCOMPtr.h:396]
#19: nsParser::DidBuildModel(nsresult) [parser/htmlparser/nsParser.cpp:499]
#20: nsParser::ResumeParse(bool, bool, bool) [parser/htmlparser/nsParser.cpp:1101]
#21: nsParser::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [parser/htmlparser/nsParser.cpp:1475]
#22: nsDocumentOpenInfo::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:424]
#23: nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#24: non-virtual thunk to nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [modules/libjar/nsJARChannel.cpp:1105]
#25: nsInputStreamPump::OnStateStop() [xpcom/threads/RecursiveMutex.h:118]
#26: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:435]
#27: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#28: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#29: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#30: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#08: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#09: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#10: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#11: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#12: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#13: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#14: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#15: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#16: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#17: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#18: <name omitted> [js/src/vm/Interpreter.cpp:550]
#19: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#20: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#21: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#22: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#25: js::jit::DoCallFallback(JSContext*, js::jit::BaselineFrame*, js::jit::ICCall_Fallback*, unsigned int, JS::Value*, JS::MutableHandle<JS::Value>) [js/src/jit/BaselineIC.cpp:2512]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:806]
#05: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#06: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#07: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#08: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#09: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#10: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#11: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#12: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#13: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#14: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#15: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#16: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#17: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#18: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#19: <name omitted> [js/src/vm/Interpreter.cpp:550]
#20: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#21: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#22: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#23: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#26: js::jit::DoCallFallback(JSContext*, js::jit::BaselineFrame*, js::jit::ICCall_Fallback*, unsigned int, JS::Value*, JS::MutableHandle<JS::Value>) [js/src/jit/BaselineIC.cpp:2512]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::AddFCItemsForAnonymousContent(nsFrameConstructorState&, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>&, nsCSSFrameConstructor::FrameConstructionItemList&, unsigned int) [layout/base/nsCSSFrameConstructor.cpp:11223]
#08: nsCSSFrameConstructor::BeginBuildingScrollFrame(nsFrameConstructorState&, nsIContent*, nsStyleContext*, nsContainerFrame*, nsAtom*, bool, nsContainerFrame*&) [layout/base/nsCSSFrameConstructor.cpp:4742]
#09: nsCSSFrameConstructor::SetUpDocElementContainingBlock(nsIContent*) [layout/base/nsCSSFrameConstructor.cpp:3038]
#10: nsCSSFrameConstructor::ConstructDocElementFrame(mozilla::dom::Element*, nsILayoutHistoryState*) [layout/base/nsCSSFrameConstructor.cpp:2539]
#11: nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [layout/base/nsCSSFrameConstructor.cpp:8111]
#12: nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind) [layout/base/nsCSSFrameConstructor.cpp:8001]
#13: mozilla::PresShell::Initialize(int, int) [mfbt/RefPtr.h:287]
#14: mozilla::dom::XULDocument::StartLayout() [dom/xul/XULDocument.cpp:1934]
#15: mozilla::dom::XULDocument::DoneWalking() [dom/xul/XULDocument.cpp:3026]
#16: mozilla::dom::XULDocument::ResumeWalk() [xpcom/base/nsCOMPtr.h:424]
#17: mozilla::dom::XULDocument::EndLoad() [dom/xul/XULDocument.cpp:567]
#18: XULContentSinkImpl::DidBuildModel(bool) [xpcom/base/nsCOMPtr.h:396]
#19: nsParser::DidBuildModel(nsresult) [parser/htmlparser/nsParser.cpp:499]
#20: nsParser::ResumeParse(bool, bool, bool) [parser/htmlparser/nsParser.cpp:1101]
#21: nsParser::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [parser/htmlparser/nsParser.cpp:1475]
#22: nsDocumentOpenInfo::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:424]
#23: nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#24: non-virtual thunk to nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [modules/libjar/nsJARChannel.cpp:1105]
#25: nsInputStreamPump::OnStateStop() [xpcom/threads/RecursiveMutex.h:118]
#26: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:435]
#27: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#28: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#29: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#30: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#08: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#09: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#10: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#11: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#12: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#13: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#14: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#15: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#16: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#17: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#18: <name omitted> [js/src/vm/Interpreter.cpp:550]
#19: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#20: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#21: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#22: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#25: js::jit::DoCallFallback(JSContext*, js::jit::BaselineFrame*, js::jit::ICCall_Fallback*, unsigned int, JS::Value*, JS::MutableHandle<JS::Value>) [js/src/jit/BaselineIC.cpp:2512]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:806]
#05: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#06: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#07: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#08: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#09: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#10: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#11: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#12: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#13: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#14: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#15: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#16: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#17: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#18: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#19: <name omitted> [js/src/vm/Interpreter.cpp:550]
#20: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#21: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#22: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#23: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#26: js::jit::DoCallFallback(JSContext*, js::jit::BaselineFrame*, js::jit::ICCall_Fallback*, unsigned int, JS::Value*, JS::MutableHandle<JS::Value>) [js/src/jit/BaselineIC.cpp:2512]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsPrefBranch::GetDefaultFromPropertiesFile(char const*, nsTSubstring<char16_t>&) [modules/libpref/nsPrefBranch.cpp:970]
#04: nsPrefBranch::GetComplexValue(char const*, nsID const&, void**) [modules/libpref/nsPrefBranch.cpp:356]
#05: mozilla::Preferences::GetLocalizedString(char const*, nsTSubstring<char16_t>&) [modules/libpref/Preferences.cpp:1795]
#06: mozilla::Preferences::GetLocalizedCString(char const*, nsTSubstring<char>&) [modules/libpref/Preferences.cpp:1783]
#07: mozilla::dom::IndexedDatabaseManager::Init() [dom/indexedDB/IndexedDatabaseManager.cpp:436]
#08: mozilla::dom::IndexedDatabaseManager::GetOrCreate() [dom/indexedDB/IndexedDatabaseManager.cpp:353]
#09: mozilla::dom::workers::WorkerPrivate::GetLoadInfo(JSContext*, nsPIDOMWindowInner*, mozilla::dom::workers::WorkerPrivate*, nsTSubstring<char16_t> const&, bool, mozilla::dom::workers::WorkerPrivate::LoadGroupBehavior, mozilla::dom::WorkerType, mozilla::dom::workers::WorkerLoadInfo*) [xpcom/base/nsDebug.h:55]
#10: mozilla::dom::workers::WorkerPrivate::Constructor(JSContext*, nsTSubstring<char16_t> const&, bool, mozilla::dom::WorkerType, nsTSubstring<char16_t> const&, nsTSubstring<char> const&, mozilla::dom::workers::WorkerLoadInfo*, mozilla::ErrorResult&) [dom/bindings/ErrorResult.h:358]
#11: mozilla::dom::workers::ChromeWorkerPrivate::Constructor(mozilla::dom::GlobalObject const&, nsTSubstring<char16_t> const&, mozilla::ErrorResult&) [dom/workers/WorkerPrivate.cpp:4648]
#12: mozilla::dom::ChromeWorkerBinding::_constructor(JSContext*, unsigned int, JS::Value*) [mfbt/AlreadyAddRefed.h:143]
#13: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#14: js::CallJSNativeConstructor(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:324]
#15: InternalConstruct(JSContext*, js::AnyConstructArgs const&) [js/src/vm/Interpreter.cpp:589]
#16: js::ConstructFromStack(JSContext*, JS::CallArgs const&) [js/src/vm/Interpreter.cpp:615]
#17: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3068]
#18: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#19: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#20: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#21: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#22: bool NativeGetPropertyInline<(js::AllowGC)1>(JSContext*, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<jsid, (js::AllowGC)1>::HandleType, IsNameLookup, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2377]
#23: js::GetProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, js::PropertyName*, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#24: js::GetProperty(JSContext*, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#25: Interpret(JSContext*, js::RunState&) [js/public/RootingAPI.h:835]
#26: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#27: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#28: <name omitted> [js/src/vm/Interpreter.cpp:550]
#29: js::CallSelfHostedFunction(JSContext*, JS::Handle<js::PropertyName*>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) [js/src/vm/SelfHosting.cpp:1784]
#30: AsyncFunctionResume(JSContext*, JS::Handle<js::PromiseObject*>, JS::Handle<JS::Value>, ResumeKind, JS::Handle<JS::Value>) [js/src/vm/AsyncFunction.cpp:192]
#31: PromiseReactionJob(JSContext*, unsigned int, JS::Value*) [js/src/builtin/Promise.cpp:1094]
#32: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#33: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#34: <name omitted> [js/src/vm/Interpreter.cpp:550]
#35: JS::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) [js/src/jsapi.cpp:3021]
#36: mozilla::dom::PromiseJobCallback::Call(JSContext*, JS::Handle<JS::Value>, mozilla::ErrorResult&) [s3:gecko-generated-sources-l1:1ac589ef3f4415b1cad140c5945f932e3fda630e97fc7dc01bdf6d306292c6c729b28d3a34f0a84b44362e7d528cc9d9627990562f56625771b02d265e090411/dom/bindings/PromiseBinding.cpp::21]
#37: mozilla::dom::PromiseJobCallback::Call(mozilla::ErrorResult&, char const*, mozilla::dom::CallbackObject::ExceptionHandling, JSCompartment*) [s3:gecko-generated-sources-l1:b4f3b4deaa975bd9f9a7a45c24b53dd1d24f707951e2b563dea1a56e9905e156ca2d24d3a6123e7e3ccf3c663f65339cbe6ee3dc1f98154c1a3c47a4d8f1d0d0/dist/include/mozilla/dom/PromiseBinding.h::89]
#38: mozilla::PromiseJobRunnable::Run() [dom/bindings/ErrorResult.h:600]
#39: mozilla::dom::Promise::PerformMicroTaskCheckpoint() [dom/promise/Promise.cpp:532]
#40: XPCJSContext::BeforeProcessTask(bool) [js/xpconnect/src/XPCJSContext.cpp:1174]
#41: nsThread::ProcessNextEvent(bool, bool*) [mfbt/RefPtr.h:317]
#42: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#43: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: mozilla::CubebUtils::InitBrandName() [dom/media/CubebUtils.cpp:367]
#04: mozilla::detail::RunnableFunction<void (*)()>::Run() [xpcom/threads/nsThreadUtils.h:528]
#05: mozilla::EventTargetWrapper::Runner::Run() [xpcom/threads/AbstractThread.cpp:154]
#06: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#07: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#08: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsNSSComponent::GetPIPNSSBundleString(char const*, nsTSubstring<char16_t>&) [security/manager/ssl/nsNSSComponent.cpp:261]
#04: nsNSSComponent::ConfigureInternalPKCS11Token() [security/manager/ssl/nsNSSComponent.cpp:1365]
#05: nsNSSComponent::InitializeNSS() [xpcom/string/nsTString.h:569]
#06: nsNSSComponent::Init() [security/manager/ssl/nsNSSComponent.cpp:2273]
#07: (anonymous namespace)::nsNSSComponentConstructor(nsISupports*, nsID const&, void**) [security/manager/ssl/nsNSSModule.cpp:132]
#08: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1086]
#09: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#10: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#11: nsCOMPtr_base::assign_from_gs_contractid(nsGetServiceByContractID, nsID const&) [xpcom/base/nsCOMPtr.cpp:95]
#12: EnsureNSSInitializedChromeOrContent() [security/manager/ssl/nsNSSComponent.cpp:116]
#13: nsresult mozilla::psm::Constructor<nsNSSCertificateDB, (nsresult (nsNSSCertificateDB::*)())0, (mozilla::psm::ProcessRestriction)0, (mozilla::psm::ThreadRestriction)1>(nsISupports*, nsID const&, void**) [security/manager/ssl/nsNSSModule.cpp:94]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsStringBundle::GetStringFromAUTF8Name(nsTSubstring<char> const&, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:148]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsPermissionManager::ImportDefaults() [extensions/cookie/nsPermissionManager.cpp:2867]
#02: nsPermissionManager::InitDB(bool) [extensions/cookie/nsPermissionManager.cpp:1579]
#03: nsPermissionManager::Init() [xpcom/base/nsCOMPtr.h:424]
#04: nsPermissionManager::GetXPCOMSingleton() [extensions/cookie/nsPermissionManager.cpp:908]
#05: nsIPermissionManagerConstructor(nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:72]
#06: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1086]
#07: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#08: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#09: mozilla::services::GetPermissionManager() [xpcom/base/nsCOMPtr.h:1215]
#10: TestSitePerm(nsIPrincipal*, char const*, unsigned int, bool) [mfbt/AlreadyAddRefed.h:121]
#11: nsContentUtils::AllowXULXBLForPrincipal(nsIPrincipal*) [dom/base/nsContentUtils.cpp:3968]
#12: XPCWrappedNativeScope::XPCWrappedNativeScope(JSContext*, JS::Handle<JSObject*>) [js/xpconnect/src/XPCWrappedNativeScope.cpp:86]
#13: xpc::CreateGlobalObject(JSContext*, JSClass const*, nsIPrincipal*, JS::CompartmentOptions&) [js/public/Class.h:938]
#14: mozilla::dom::SimpleGlobalObject::Create(mozilla::dom::SimpleGlobalObject::GlobalType, JS::Handle<JS::Value>) [js/public/RootingAPI.h:850]
#15: mozilla::dom::WidevineCDMManifest::Init(nsTSubstring<char16_t> const&) [s3:gecko-generated-sources-l1:0c065936d70d001befed7c9ed2a2bbe11169ad8eb18efa1d74aa64b775f90add1ded5cca335b6bd5ffa6f2b37fc1aec262b344fb5a4c9207e81f4ffdb9d2ad2b/dom/bindings/WidevineCDMManifestBinding.cpp::204]
#16: mozilla::gmp::GMPParent::ParseChromiumManifest(nsTSubstring<char16_t> const&) [dom/media/gmp/GMPParent.cpp:737]
#17: mozilla::detail::ProxyRunnable<mozilla::MozPromise<bool, nsresult, false>, RefPtr<mozilla::MozPromise<bool, nsresult, false> > (mozilla::gmp::GMPParent::*)(nsTSubstring<char16_t> const&), mozilla::gmp::GMPParent, StoreCopyPassByRRef<NS_ConvertUTF8toUTF16> >::Run() [xpcom/base/nsAutoPtr.h:38]
#18: mozilla::EventTargetWrapper::Runner::Run() [xpcom/threads/AbstractThread.cpp:154]
#19: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#20: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#21: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:347]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:349]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsStringBundle::FormatStringFromName(char const*, char16_t const**, unsigned int, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:204]
#04: mozilla::css::ErrorReporter::ReportUnexpected(char const*, nsCSSToken const&) [layout/style/ErrorReporter.cpp:350]
#05: (anonymous namespace)::CSSParserImpl::ParseColor(nsCSSValue&) [layout/style/nsCSSParser.cpp:3020]
#06: (anonymous namespace)::CSSParserImpl::ParseVariant(nsCSSValue&, unsigned int, nsCSSProps::KTableEntry const*) [layout/style/nsCSSParser.cpp:7796]
#07: (anonymous namespace)::CSSParserImpl::ParseChoice(nsCSSValue*, nsCSSPropertyID const*, int) [layout/style/nsCSSParser.cpp:11052]
#08: (anonymous namespace)::CSSParserImpl::ParsePropertyByFunction(nsCSSPropertyID) [layout/style/nsCSSParser.cpp:15302]
#09: (anonymous namespace)::CSSParserImpl::ParseProperty(nsCSSPropertyID) [layout/style/nsCSSParser.cpp:11436]
#10: (anonymous namespace)::CSSParserImpl::ParseDeclaration(mozilla::css::Declaration*, unsigned int, bool, bool*, (anonymous namespace)::CSSParserImpl::nsCSSContextType) [layout/style/nsCSSParser.cpp:7163]
#11: (anonymous namespace)::CSSParserImpl::ParseDeclarationBlock(unsigned int, (anonymous namespace)::CSSParserImpl::nsCSSContextType) [layout/style/nsCSSParser.cpp:6536]
#12: (anonymous namespace)::CSSParserImpl::ParseRuleSet(void (*)(mozilla::css::Rule*, void*), void*, bool) [mfbt/AlreadyAddRefed.h:121]
#13: nsCSSParser::ParseSheet(nsTSubstring<char16_t> const&, nsIURI*, nsIURI*, nsIPrincipal*, unsigned int, mozilla::css::LoaderReusableStyleSheets*) [layout/style/nsCSSParser.cpp:1645]
#14: mozilla::css::Loader::ParseSheet(nsTSubstring<char16_t> const&, mozilla::Span<unsigned char const, 18446744073709551615ul>, mozilla::css::SheetLoadData*, bool&) [layout/style/Loader.cpp:1640]
#15: mozilla::css::SheetLoadData::OnStreamComplete(nsIUnicharStreamLoader*, nsISupports*, nsresult, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:622]
#16: nsUnicharStreamLoader::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#17: nsSyncLoadService::PushSyncStreamToListener(nsIInputStream*, nsIStreamListener*, nsIChannel*) [xpcom/base/nsCOMPtr.h:424]
#18: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1405]
#19: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#20: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#21: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#22: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#23: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:349]
#24: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#25: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#26: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#27: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#28: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#29: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#30: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#31: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:351]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:353]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:355]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:360]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::ScrollbarsSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2387]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::NumberControlSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2403]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::FormsSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2408]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::NoScriptSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2435]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::UASheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2461]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::RegisterFromEnumerator(nsICategoryManager*, char const*, nsISimpleEnumerator*, unsigned int) [xpcom/base/nsCOMPtr.h:424]
#06: nsStyleSheetService::Init() [xpcom/base/nsCOMPtr.h:800]
#07: nsStyleSheetServiceConstructor(nsISupports*, nsID const&, void**) [layout/build/nsLayoutModule.cpp:466]
#08: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1086]
#09: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#10: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#11: nsStyleSheetService::GetInstance() [xpcom/base/nsCOMPtr.h:1215]
#12: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2465]
#13: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#14: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#15: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#16: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#17: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#18: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#08: mozilla::dom::XULDocument::ApplyPersistentAttributes() [xpcom/base/nsCOMPtr.h:1215]
#09: mozilla::dom::XULDocument::ResumeWalk() [dom/xul/XULDocument.cpp:2968]
#10: mozilla::dom::XULDocument::EndLoad() [dom/xul/XULDocument.cpp:567]
#11: XULContentSinkImpl::DidBuildModel(bool) [xpcom/base/nsCOMPtr.h:396]
#12: nsParser::DidBuildModel(nsresult) [parser/htmlparser/nsParser.cpp:499]
#13: nsParser::ResumeParse(bool, bool, bool) [parser/htmlparser/nsParser.cpp:1101]
#14: nsParser::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [parser/htmlparser/nsParser.cpp:1475]
#15: nsDocumentOpenInfo::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:424]
#16: nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#17: non-virtual thunk to nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [modules/libjar/nsJARChannel.cpp:1105]
#18: nsInputStreamPump::OnStateStop() [xpcom/threads/RecursiveMutex.h:118]
#19: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:435]
#20: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#21: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#22: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#23: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::AddFCItemsForAnonymousContent(nsFrameConstructorState&, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>&, nsCSSFrameConstructor::FrameConstructionItemList&, unsigned int) [layout/base/nsCSSFrameConstructor.cpp:11223]
#08: nsCSSFrameConstructor::BeginBuildingScrollFrame(nsFrameConstructorState&, nsIContent*, nsStyleContext*, nsContainerFrame*, nsAtom*, bool, nsContainerFrame*&) [layout/base/nsCSSFrameConstructor.cpp:4742]
#09: nsCSSFrameConstructor::SetUpDocElementContainingBlock(nsIContent*) [layout/base/nsCSSFrameConstructor.cpp:3038]
#10: nsCSSFrameConstructor::ConstructDocElementFrame(mozilla::dom::Element*, nsILayoutHistoryState*) [layout/base/nsCSSFrameConstructor.cpp:2539]
#11: nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [layout/base/nsCSSFrameConstructor.cpp:8111]
#12: nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind) [layout/base/nsCSSFrameConstructor.cpp:8001]
#13: mozilla::PresShell::Initialize(int, int) [mfbt/RefPtr.h:287]
#14: mozilla::dom::XULDocument::StartLayout() [dom/xul/XULDocument.cpp:1934]
#15: mozilla::dom::XULDocument::DoneWalking() [dom/xul/XULDocument.cpp:3026]
#16: mozilla::dom::XULDocument::ResumeWalk() [xpcom/base/nsCOMPtr.h:424]
#17: mozilla::dom::XULDocument::EndLoad() [dom/xul/XULDocument.cpp:567]
#18: XULContentSinkImpl::DidBuildModel(bool) [xpcom/base/nsCOMPtr.h:396]
#19: nsParser::DidBuildModel(nsresult) [parser/htmlparser/nsParser.cpp:499]
#20: nsParser::ResumeParse(bool, bool, bool) [parser/htmlparser/nsParser.cpp:1101]
#21: nsParser::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [parser/htmlparser/nsParser.cpp:1475]
#22: nsDocumentOpenInfo::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:424]
#23: nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#24: non-virtual thunk to nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [modules/libjar/nsJARChannel.cpp:1105]
#25: nsInputStreamPump::OnStateStop() [xpcom/threads/RecursiveMutex.h:118]
#26: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:435]
#27: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#28: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#29: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#30: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#08: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#09: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#10: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#11: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#12: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#13: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#14: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#15: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#16: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#17: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#18: <name omitted> [js/src/vm/Interpreter.cpp:550]
#19: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#20: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#21: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#22: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#25: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3076]
#26: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#27: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#28: <name omitted> [js/src/vm/Interpreter.cpp:550]
#29: js::jit::InterpretResume(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [mfbt/GuardObjects.h:119]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:806]
#05: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#06: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#07: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#08: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#09: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#10: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#11: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#12: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#13: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#14: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#15: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#16: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#17: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#18: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#19: <name omitted> [js/src/vm/Interpreter.cpp:550]
#20: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#21: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#22: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#23: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#26: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3076]
#27: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#28: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#29: <name omitted> [js/src/vm/Interpreter.cpp:550]
#30: js::jit::InterpretResume(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [mfbt/GuardObjects.h:119]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#08: mozilla::dom::ContentParent::GetNewOrUsedBrowserProcess(nsTSubstring<char16_t> const&, mozilla::hal::ProcessPriority, mozilla::dom::ContentParent*, bool) [xpcom/base/nsCOMPtr.h:1215]
#09: mozilla::dom::ContentParent::CreateBrowser(mozilla::dom::TabContext const&, mozilla::dom::Element*, mozilla::dom::ContentParent*, mozilla::dom::TabParent*, unsigned long long) [mfbt/AlreadyAddRefed.h:121]
#10: nsFrameLoader::TryRemoteBrowser() [dom/base/nsFrameLoader.cpp:3223]
#11: nsFrameLoader::ShowRemoteFrame(mozilla::gfx::IntSizeTyped<mozilla::ScreenPixel> const&, nsSubDocumentFrame*) [dom/base/nsFrameLoader.cpp:1394]
#12: nsFrameLoader::Show(int, int, int, int, nsSubDocumentFrame*) [dom/base/nsFrameLoader.cpp:1251]
#13: nsSubDocumentFrame::ShowViewer() [layout/generic/nsIFrame.h:4527]
#14: AsyncFrameInit::Run() [tools/profiler/public/GeckoProfiler.h:596]
#15: nsContentUtils::RemoveScriptBlocker() [xpcom/base/nsCOMPtr.h:396]
#16: nsDocument::EndUpdate(unsigned int) [dom/base/nsDocument.cpp:5376]
#17: mozilla::dom::XULDocument::EndUpdate(unsigned int) [dom/xul/XULDocument.cpp:3196]
#18: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/mozAutoDocUpdate.h:40]
#19: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#20: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#21: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#22: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#23: <name omitted> [js/src/vm/Interpreter.cpp:550]
#24: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#25: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#26: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#27: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#28: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#29: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#30: Interpret(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:3076]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:504]
#33: <name omitted> [js/src/vm/Interpreter.cpp:550]
#34: js::jit::InterpretResume(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [mfbt/GuardObjects.h:119]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsJSCID::CreateInstance(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:661]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractIDWithError::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:293]
#08: nsCOMPtr_base::assign_from_gs_contractid_with_error(nsGetServiceByContractIDWithError const&, nsID const&) [xpcom/base/nsCOMPtr.cpp:106]
#09: nsAppStartupNotifier::Observe(nsISupports*, char const*, char16_t const*) [xpcom/base/nsCOMPtr.h:1029]
#10: XRE_InitEmbedding2(nsIFile*, nsIFile*, nsIDirectoryServiceProvider*) [xpcom/base/nsCOMPtr.h:424]
#11: mozilla::ipc::ScopedXREEmbed::Start() [ipc/glue/ScopedXREEmbed.cpp:98]
#12: mozilla::dom::ContentProcess::Init(int, char**) [xpcom/base/nsCOMPtr.h:780]
#13: XRE_InitChildProcess(int, char**, XREChildData const*) [toolkit/xre/nsEmbedFunctions.cpp:671]
#14: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::LoadAndRegisterSheet(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:173]
#06: mozilla::dom::ContentChild::RecvLoadAndRegisterSheet(mozilla::ipc::URIParams const&, unsigned int const&) [xpcom/base/nsCOMPtr.h:424]
#07: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::6757]
#08: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#09: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#10: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#11: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#12: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#13: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#14: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#15: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#16: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#17: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#18: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#19: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#20: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::LoadAndRegisterSheet(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:173]
#06: mozilla::dom::ContentChild::RecvLoadAndRegisterSheet(mozilla::ipc::URIParams const&, unsigned int const&) [xpcom/base/nsCOMPtr.h:424]
#07: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::6757]
#08: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#09: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#10: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#11: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#12: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#13: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#14: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#15: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#16: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#17: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#18: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#19: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#20: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractID::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:281]
#08: ChromeTooltipListener::ChromeTooltipListener(nsWebBrowser*, nsIWebBrowserChrome*) [xpcom/base/nsCOMPtr.h:1215]
#09: nsDocShellTreeOwner::AddChromeListeners() [mfbt/RefPtr.h:193]
#10: nsWebBrowser::Create() [xpcom/base/nsAutoPtr.h:38]
#11: mozilla::dom::TabChild::Init() [dom/ipc/TabChild.cpp:589]
#12: mozilla::dom::nsIContentChild::RecvPBrowserConstructor(mozilla::dom::PBrowserChild*, mozilla::dom::IdType<mozilla::dom::TabParent> const&, mozilla::dom::IdType<mozilla::dom::TabParent> const&, mozilla::dom::IPCTabContext const&, unsigned int const&, mozilla::dom::IdType<mozilla::dom::ContentParent> const&, bool const&) [xpcom/base/nsDebug.h:55]
#13: mozilla::dom::ContentChild::RecvPBrowserConstructor(mozilla::dom::PBrowserChild*, mozilla::dom::IdType<mozilla::dom::TabParent> const&, mozilla::dom::IdType<mozilla::dom::TabParent> const&, mozilla::dom::IPCTabContext const&, unsigned int const&, mozilla::dom::IdType<mozilla::dom::ContentParent> const&, bool const&) [dom/ipc/ContentChild.cpp:1838]
#14: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4969]
#15: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#16: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#17: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#18: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#19: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#20: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#21: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#22: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#23: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#24: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#25: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#26: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#27: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#28: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsMessageManagerScriptExecutor::TryCacheLoadAndCompileScript(nsTSubstring<char16_t> const&, bool, bool, JS::MutableHandle<JSScript*>) [dom/base/nsFrameMessageManager.cpp:1638]
#02: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [js/public/RootingAPI.h:426]
#03: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#04: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#05: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#06: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#07: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#08: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#09: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#10: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#11: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#12: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#13: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#14: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#15: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#16: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#17: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#18: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#19: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsMessageManagerScriptExecutor::TryCacheLoadAndCompileScript(nsTSubstring<char16_t> const&, bool, bool, JS::MutableHandle<JSScript*>) [dom/base/nsFrameMessageManager.cpp:1638]
#02: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [js/public/RootingAPI.h:426]
#03: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#04: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#05: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#06: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#07: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#08: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#09: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#10: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#11: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#12: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#13: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#14: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#15: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#16: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#17: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#18: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#19: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:347]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:349]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:351]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:353]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::nsLayoutStylesheetCache(mozilla::StyleBackendType) [layout/style/nsLayoutStylesheetCache.cpp:355]
#07: nsLayoutStylesheetCache::For(mozilla::StyleBackendType) [xpcom/base/StaticPtr.h:157]
#08: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2329]
#09: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#10: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#11: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#12: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#13: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#14: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#15: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#16: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#17: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#18: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#19: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#20: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#21: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#22: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#23: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#26: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#27: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#28: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#30: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#31: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#32: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#33: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#34: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#35: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#36: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#37: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#38: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#39: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#40: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#41: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#42: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#43: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#44: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#45: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#46: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#47: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#48: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#49: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#50: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#51: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#52: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#53: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::ScrollbarsSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2387]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::NumberControlSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2403]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::FormsSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2408]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::NoScriptSheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2435]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsLayoutStylesheetCache::LoadSheet(nsIURI*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:805]
#05: nsLayoutStylesheetCache::LoadSheetURL(char const*, RefPtr<mozilla::StyleSheet>*, mozilla::css::SheetParsingMode, mozilla::css::FailureAction) [layout/style/nsLayoutStylesheetCache.cpp:458]
#06: nsLayoutStylesheetCache::UASheet() [mfbt/RefPtr.h:287]
#07: nsDocumentViewer::CreateStyleSet(nsIDocument*) [layout/base/nsDocumentViewer.cpp:2461]
#08: nsDocumentViewer::InitPresentationStuff(bool) [xpcom/base/nsCOMPtr.h:800]
#09: nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) [layout/base/nsDocumentViewer.cpp:943]
#10: nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) [layout/base/nsDocumentViewer.cpp:660]
#11: nsDocShell::SetupNewViewer(nsIContentViewer*) [docshell/base/nsDocShell.cpp:9553]
#12: nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) [docshell/base/nsDocShell.cpp:7377]
#13: nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIURI*, bool, bool) [docshell/base/nsDocShell.cpp:8251]
#14: nsDocShell::EnsureContentViewer() [docshell/base/nsDocShell.cpp:8109]
#15: nsDocShell::GetDocument() [docshell/base/nsDocShell.cpp:4641]
#16: nsPIDOMWindow<mozIDOMWindowProxy>::MaybeCreateDoc() [dom/base/nsGlobalWindow.cpp:4126]
#17: non-virtual thunk to nsGlobalWindow::WrapObject(JSContext*, JS::Handle<JSObject*>) [dom/base/nsPIDOMWindow.h:213]
#18: XPCConvert::NativeInterface2JSObject(JS::MutableHandle<JS::Value>, xpcObjectHelper&, nsID const*, bool, nsresult*) [js/xpconnect/src/XPCConvert.cpp:760]
#19: XPCConvert::NativeData2JS(JS::MutableHandle<JS::Value>, void const*, nsXPTType const&, nsID const*, nsresult*) [js/xpconnect/src/XPCConvert.cpp:345]
#20: CallMethodHelper::GatherAndConvertResults() [js/xpconnect/src/XPCWrappedNative.cpp:1516]
#21: CallMethodHelper::Call() [js/xpconnect/src/XPCWrappedNative.cpp:1326]
#22: XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) [js/xpconnect/src/XPCWrappedNative.cpp:1282]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#25: js::CallGetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter.cpp:550]
#26: bool GetExistingProperty<(js::AllowGC)1>(JSContext*, js::MaybeRooted<JS::Value, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::NativeObject*, (js::AllowGC)1>::HandleType, js::MaybeRooted<js::Shape*, (js::AllowGC)1>::HandleType, js::MaybeRooted<JS::Value, (js::AllowGC)1>::MutableHandleType) [js/src/vm/NativeObject.cpp:2121]
#27: js::NativeGetExistingProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::NativeObject*>, JS::Handle<js::Shape*>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#28: bool js::FetchName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::Handle<JS::PropertyResult>, JS::MutableHandle<JS::Value>) [js/public/RootingAPI.h:835]
#29: bool js::GetEnvironmentName<(js::GetNameMode)0>(JSContext*, JS::Handle<JSObject*>, JS::Handle<js::PropertyName*>, JS::MutableHandle<JS::Value>) [js/src/vm/Interpreter-inl.h:254]
#30: Interpret(JSContext*, js::RunState&) [clang/include/c++/v1/atomic:894]
#31: js::RunScript(JSContext*, js::RunState&) [js/src/vm/Interpreter.cpp:432]
#32: js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) [js/src/vm/Interpreter.cpp:715]
#33: ExecuteInExtensibleLexicalEnvironment(JSContext*, JS::Handle<JSScript*>, JS::Handle<JSObject*>) [js/src/builtin/Eval.cpp:465]
#34: js::ExecuteInGlobalAndReturnScope(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::MutableHandle<JSObject*>) [js/src/builtin/Eval.cpp:483]
#35: nsMessageManagerScriptExecutor::LoadScriptInternal(nsTSubstring<char16_t> const&, bool) [dom/base/nsFrameMessageManager.cpp:1582]
#36: non-virtual thunk to mozilla::dom::TabChild::RecvLoadRemoteScript(nsTString<char16_t> const&, bool const&) [dom/ipc/TabChild.cpp:2323]
#37: mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:75ba35ec603115abd4cf8778efb4f8dcd352ac807f7c72b79c7ce717a48901afaed30217cc1e5bc9e585c9adf7115e4b73b3d6fcdc24eff107311fcb3b6f76a6/ipc/ipdl/PBrowserChild.cpp::4459]
#38: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::4868]
#39: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#40: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#41: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#42: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#43: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#44: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#45: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#46: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#47: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#48: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#49: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#50: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#51: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#52: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: mozilla::CubebUtils::InitBrandName() [dom/media/CubebUtils.cpp:367]
#04: mozilla::detail::RunnableFunction<void (*)()>::Run() [xpcom/threads/nsThreadUtils.h:528]
#05: mozilla::EventTargetWrapper::Runner::Run() [xpcom/threads/AbstractThread.cpp:154]
#06: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#07: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#08: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#11: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#12: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#13: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#14: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsPrefBranch::GetDefaultFromPropertiesFile(char const*, nsTSubstring<char16_t>&) [modules/libpref/nsPrefBranch.cpp:970]
#04: nsPrefBranch::GetComplexValue(char const*, nsID const&, void**) [modules/libpref/nsPrefBranch.cpp:356]
#05: mozilla::Preferences::GetLocalizedString(char const*, nsTSubstring<char16_t>&) [modules/libpref/Preferences.cpp:1795]
#06: mozilla::Preferences::GetLocalizedCString(char const*, nsTSubstring<char>&) [modules/libpref/Preferences.cpp:1783]
#07: nsHtml5StreamParser::nsHtml5StreamParser(nsHtml5TreeOpExecutor*, nsHtml5Parser*, eParserMode) [xpcom/string/nsTStringRepr.h:159]
#08: nsHtml5Parser::MarkAsNotScriptCreated(char const*) [parser/html/nsHtml5Parser.cpp:606]
#09: nsHTMLDocument::StartDocumentLoad(char const*, nsIChannel*, nsILoadGroup*, nsISupports*, nsIStreamListener**, bool, nsIContentSink*) [dom/html/nsHTMLDocument.cpp:604]
#10: nsContentDLF::CreateDocument(char const*, nsIChannel*, nsILoadGroup*, nsIDocShell*, nsID const&, nsIStreamListener**, nsIContentViewer**) [layout/build/nsContentDLF.cpp:364]
#11: nsContentDLF::CreateInstance(char const*, nsIChannel*, nsILoadGroup*, nsTSubstring<char> const&, nsIDocShell*, nsISupports*, nsIStreamListener**, nsIContentViewer**) [layout/build/nsContentDLF.cpp:186]
#12: nsDocShell::NewContentViewerObj(nsTSubstring<char> const&, nsIRequest*, nsILoadGroup*, nsIStreamListener**, nsIContentViewer**) [docshell/base/nsDocShell.cpp:9414]
#13: nsDocShell::CreateContentViewer(nsTSubstring<char> const&, nsIRequest*, nsIStreamListener**) [docshell/base/nsDocShell.cpp:9205]
#14: nsDSURIContentListener::DoContent(nsTSubstring<char> const&, bool, nsIRequest*, nsIStreamListener**, bool*) [docshell/base/nsDSURIContentListener.cpp:114]
#15: nsDocumentOpenInfo::TryContentListener(nsIURIContentListener*, nsIChannel*) [uriloader/base/nsURILoader.cpp:739]
#16: nsDocumentOpenInfo::DispatchContent(nsIRequest*, nsISupports*) [uriloader/base/nsURILoader.cpp:417]
#17: nsDocumentOpenInfo::OnStartRequest(nsIRequest*, nsISupports*) [uriloader/base/nsURILoader.cpp:295]
#18: nsBaseChannel::OnStartRequest(nsIRequest*, nsISupports*) [netwerk/base/nsBaseChannel.cpp:859]
#19: nsInputStreamPump::OnStateStart() [netwerk/base/nsInputStreamPump.cpp:517]
#20: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:420]
#21: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#22: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#23: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#24: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#25: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#26: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#27: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#28: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#29: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#30: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#31: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::AddFCItemsForAnonymousContent(nsFrameConstructorState&, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>&, nsCSSFrameConstructor::FrameConstructionItemList&, unsigned int) [layout/base/nsCSSFrameConstructor.cpp:11223]
#08: nsCSSFrameConstructor::BeginBuildingScrollFrame(nsFrameConstructorState&, nsIContent*, nsStyleContext*, nsContainerFrame*, nsAtom*, bool, nsContainerFrame*&) [layout/base/nsCSSFrameConstructor.cpp:4742]
#09: nsCSSFrameConstructor::SetUpDocElementContainingBlock(nsIContent*) [layout/base/nsCSSFrameConstructor.cpp:3038]
#10: nsCSSFrameConstructor::ConstructDocElementFrame(mozilla::dom::Element*, nsILayoutHistoryState*) [layout/base/nsCSSFrameConstructor.cpp:2539]
#11: nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [layout/base/nsCSSFrameConstructor.cpp:8111]
#12: nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind) [layout/base/nsCSSFrameConstructor.cpp:8001]
#13: mozilla::PresShell::Initialize(int, int) [mfbt/RefPtr.h:287]
#14: nsContentSink::StartLayout(bool) [dom/base/nsContentSink.cpp:1286]
#15: nsHtml5TreeOpExecutor::StartLayout(bool*) [mfbt/RefPtr.h:311]
#16: nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor*, nsIContent**, bool*) [parser/html/nsHtml5TreeOperation.cpp:1146]
#17: nsHtml5TreeOpExecutor::RunFlushLoop() [parser/html/nsHtml5TreeOpExecutor.cpp:461]
#18: nsHtml5ExecutorFlusher::Run() [parser/html/nsHtml5StreamParser.cpp:132]
#19: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#20: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#21: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#22: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#23: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#24: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#25: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#26: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#27: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#28: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#05: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#06: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#07: CoreFoundation + 0x80a01
#08: CoreFoundation + 0x72b8d
#09: CoreFoundation + 0x721bf
#10: CoreFoundation + 0x71bd8
#11: HIToolbox + 0x3256f
#12: HIToolbox + 0x322ea
#13: HIToolbox + 0x3212b
#14: AppKit + 0x918ab
#15: AppKit + 0x90e58
#16: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#17: AppKit + 0x86af3
#18: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#19: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#20: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#21: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#22: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#23: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: nsPrefBranch::GetDefaultFromPropertiesFile(char const*, nsTSubstring<char16_t>&) [modules/libpref/nsPrefBranch.cpp:970]
#04: nsPrefBranch::GetComplexValue(char const*, nsID const&, void**) [modules/libpref/nsPrefBranch.cpp:356]
#05: mozilla::Preferences::GetLocalizedString(char const*, nsTSubstring<char16_t>&) [modules/libpref/Preferences.cpp:1795]
#06: mozilla::Preferences::GetLocalizedCString(char const*, nsTSubstring<char>&) [modules/libpref/Preferences.cpp:1783]
#07: nsHtml5StreamParser::nsHtml5StreamParser(nsHtml5TreeOpExecutor*, nsHtml5Parser*, eParserMode) [xpcom/string/nsTStringRepr.h:159]
#08: nsHtml5Parser::MarkAsNotScriptCreated(char const*) [parser/html/nsHtml5Parser.cpp:606]
#09: nsHTMLDocument::StartDocumentLoad(char const*, nsIChannel*, nsILoadGroup*, nsISupports*, nsIStreamListener**, bool, nsIContentSink*) [dom/html/nsHTMLDocument.cpp:604]
#10: nsContentDLF::CreateDocument(char const*, nsIChannel*, nsILoadGroup*, nsIDocShell*, nsID const&, nsIStreamListener**, nsIContentViewer**) [layout/build/nsContentDLF.cpp:364]
#11: nsContentDLF::CreateInstance(char const*, nsIChannel*, nsILoadGroup*, nsTSubstring<char> const&, nsIDocShell*, nsISupports*, nsIStreamListener**, nsIContentViewer**) [layout/build/nsContentDLF.cpp:186]
#12: nsDocShell::NewContentViewerObj(nsTSubstring<char> const&, nsIRequest*, nsILoadGroup*, nsIStreamListener**, nsIContentViewer**) [docshell/base/nsDocShell.cpp:9414]
#13: nsDocShell::CreateContentViewer(nsTSubstring<char> const&, nsIRequest*, nsIStreamListener**) [docshell/base/nsDocShell.cpp:9205]
#14: nsDSURIContentListener::DoContent(nsTSubstring<char> const&, bool, nsIRequest*, nsIStreamListener**, bool*) [docshell/base/nsDSURIContentListener.cpp:114]
#15: nsDocumentOpenInfo::TryContentListener(nsIURIContentListener*, nsIChannel*) [uriloader/base/nsURILoader.cpp:739]
#16: nsDocumentOpenInfo::DispatchContent(nsIRequest*, nsISupports*) [uriloader/base/nsURILoader.cpp:417]
#17: nsDocumentOpenInfo::OnStartRequest(nsIRequest*, nsISupports*) [uriloader/base/nsURILoader.cpp:295]
#18: nsBaseChannel::OnStartRequest(nsIRequest*, nsISupports*) [netwerk/base/nsBaseChannel.cpp:859]
#19: nsInputStreamPump::OnStateStart() [netwerk/base/nsInputStreamPump.cpp:517]
#20: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:420]
#21: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#22: mozilla::SchedulerGroup::Runnable::Run() [xpcom/threads/SchedulerGroup.cpp:396]
#23: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#24: NS_ProcessPendingEvents(nsIThread*, unsigned int) [xpcom/threads/nsThreadUtils.cpp:466]
#25: nsBaseAppShell::NativeEventCallback() [widget/nsBaseAppShell.cpp:100]
#26: nsAppShell::ProcessGeckoEvents(void*) [widget/cocoa/nsAppShell.mm:437]
#27: CoreFoundation + 0x80a01
#28: CoreFoundation + 0x72b8d
#29: CoreFoundation + 0x721bf
#30: CoreFoundation + 0x71bd8
#31: HIToolbox + 0x3256f
#32: HIToolbox + 0x322ea
#33: HIToolbox + 0x3212b
#34: AppKit + 0x918ab
#35: AppKit + 0x90e58
#36: -[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] [widget/cocoa/nsAppShell.mm:158]
#37: AppKit + 0x86af3
#38: nsAppShell::Run() [widget/cocoa/nsAppShell.mm:715]
#39: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:877]
#40: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#41: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#42: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#43: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1446]
#07: nsGetServiceByContractIDWithError::operator()(nsID const&, void**) const [xpcom/components/nsComponentManagerUtils.cpp:293]
#08: nsCOMPtr_base::assign_from_gs_contractid_with_error(nsGetServiceByContractIDWithError const&, nsID const&) [xpcom/base/nsCOMPtr.cpp:106]
#09: nsAppStartupNotifier::Observe(nsISupports*, char const*, char16_t const*) [xpcom/base/nsCOMPtr.h:1029]
#10: XRE_InitEmbedding2(nsIFile*, nsIFile*, nsIDirectoryServiceProvider*) [xpcom/base/nsCOMPtr.h:424]
#11: mozilla::ipc::ScopedXREEmbed::Start() [ipc/glue/ScopedXREEmbed.cpp:98]
#12: mozilla::dom::ContentProcess::Init(int, char**) [xpcom/base/nsCOMPtr.h:780]
#13: XRE_InitChildProcess(int, char**, XREChildData const*) [toolkit/xre/nsEmbedFunctions.cpp:671]
#14: main [ipc/contentproc/plugin-container.cpp:63]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::LoadModule(mozilla::FileLocation&) [js/xpconnect/loader/mozJSComponentLoader.cpp:385]
#04: nsFactoryEntry::GetFactory() [xpcom/components/nsComponentManager.cpp:754]
#05: nsComponentManagerImpl::CreateInstance(nsID const&, nsISupports*, nsID const&, void**) [mfbt/AlreadyAddRefed.h:121]
#06: nsComponentManagerImpl::GetService(nsID const&, nsID const&, void**) [xpcom/components/nsComponentManager.cpp:1246]
#07: nsJSCID::GetService(JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCJSID.cpp:699]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::LoadAndRegisterSheet(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:173]
#06: mozilla::dom::ContentChild::RecvLoadAndRegisterSheet(mozilla::ipc::URIParams const&, unsigned int const&) [xpcom/base/nsCOMPtr.h:424]
#07: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::6757]
#08: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#09: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#10: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#11: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#12: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#13: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#14: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#15: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#16: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#17: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#18: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#19: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#20: main [ipc/contentproc/plugin-container.cpp:63]
#01: mozilla::css::Loader::LoadSheet(mozilla::css::SheetLoadData*, mozilla::css::StyleSheetState, bool) [layout/style/Loader.cpp:1388]
#02: mozilla::css::Loader::InternalLoadNonDocumentSheet(nsIURI*, bool, mozilla::css::SheetParsingMode, bool, nsIPrincipal*, mozilla::Encoding const*, RefPtr<mozilla::StyleSheet>*, nsICSSLoaderObserver*, mozilla::CORSMode, mozilla::net::ReferrerPolicy, nsTSubstring<char16_t> const&) [layout/style/Loader.cpp:2329]
#03: mozilla::css::Loader::LoadSheetSync(nsIURI*, mozilla::css::SheetParsingMode, bool, RefPtr<mozilla::StyleSheet>*) [layout/style/Loader.cpp:2191]
#04: nsStyleSheetService::LoadAndRegisterSheetInternal(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:225]
#05: nsStyleSheetService::LoadAndRegisterSheet(nsIURI*, unsigned int) [layout/base/nsStyleSheetService.cpp:173]
#06: mozilla::dom::ContentChild::RecvLoadAndRegisterSheet(mozilla::ipc::URIParams const&, unsigned int const&) [xpcom/base/nsCOMPtr.h:424]
#07: mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) [s3:gecko-generated-sources-l1:4bd6fce62723c27e561006d02aae151ffad5b0b0ec5b67e1630d4eed15af9cb6372d75f5930dda52bbe801e1b338483a6255aa1be2553e70f2f6a842579f6ff5/ipc/ipdl/PContentChild.cpp::6757]
#08: mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) [ipc/glue/MessageChannel.h:635]
#09: mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) [ipc/glue/MessageChannel.cpp:2049]
#10: mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) [ipc/glue/MessageChannel.cpp:1896]
#11: mozilla::ipc::MessageChannel::MessageTask::Run() [xpcom/threads/Monitor.h:36]
#12: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#13: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#14: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#15: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#16: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#17: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#18: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#19: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#20: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: nsStringBundle::GetStringFromName(char const*, nsTSubstring<char16_t>&) [intl/strres/nsStringBundle.cpp:156]
#03: mozilla::CubebUtils::InitBrandName() [dom/media/CubebUtils.cpp:367]
#04: mozilla::detail::RunnableFunction<void (*)()>::Run() [xpcom/threads/nsThreadUtils.h:528]
#05: mozilla::EventTargetWrapper::Runner::Run() [xpcom/threads/AbstractThread.cpp:154]
#06: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#07: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#08: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#11: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#12: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#13: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#14: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsStringBundle::LoadProperties() [intl/strres/nsStringBundle.cpp:117]
#02: mozilla::detail::RunnableMethodImpl<nsStringBundle*, nsresult (nsStringBundle::*)(), true, (mozilla::RunnableKind)2>::Run() [xpcom/threads/nsThreadUtils.h:1142]
#03: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#04: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#05: mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:97]
#06: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#07: XRE_RunAppShell() [toolkit/xre/nsEmbedFunctions.cpp:874]
#08: mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) [ipc/glue/MessagePump.cpp:269]
#09: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:599]
#10: XRE_InitChildProcess(int, char**, XREChildData const*) [xpcom/base/nsAutoPtr.h:199]
#11: main [ipc/contentproc/plugin-container.cpp:63]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::AddFCItemsForAnonymousContent(nsFrameConstructorState&, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>&, nsCSSFrameConstructor::FrameConstructionItemList&, unsigned int) [layout/base/nsCSSFrameConstructor.cpp:11223]
#08: nsCSSFrameConstructor::BeginBuildingScrollFrame(nsFrameConstructorState&, nsIContent*, nsStyleContext*, nsContainerFrame*, nsAtom*, bool, nsContainerFrame*&) [layout/base/nsCSSFrameConstructor.cpp:4742]
#09: nsCSSFrameConstructor::SetUpDocElementContainingBlock(nsIContent*) [layout/base/nsCSSFrameConstructor.cpp:3038]
#10: nsCSSFrameConstructor::ConstructDocElementFrame(mozilla::dom::Element*, nsILayoutHistoryState*) [layout/base/nsCSSFrameConstructor.cpp:2539]
#11: nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [layout/base/nsCSSFrameConstructor.cpp:8111]
#12: nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, nsCSSFrameConstructor::InsertionKind) [layout/base/nsCSSFrameConstructor.cpp:8001]
#13: mozilla::PresShell::Initialize(int, int) [mfbt/RefPtr.h:287]
#14: mozilla::dom::XULDocument::StartLayout() [dom/xul/XULDocument.cpp:1934]
#15: mozilla::dom::XULDocument::DoneWalking() [dom/xul/XULDocument.cpp:3026]
#16: mozilla::dom::XULDocument::ResumeWalk() [xpcom/base/nsCOMPtr.h:424]
#17: mozilla::dom::XULDocument::EndLoad() [dom/xul/XULDocument.cpp:567]
#18: XULContentSinkImpl::DidBuildModel(bool) [xpcom/base/nsCOMPtr.h:396]
#19: nsParser::DidBuildModel(nsresult) [parser/htmlparser/nsParser.cpp:499]
#20: nsParser::ResumeParse(bool, bool, bool) [parser/htmlparser/nsParser.cpp:1101]
#21: nsParser::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [parser/htmlparser/nsParser.cpp:1475]
#22: nsDocumentOpenInfo::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:424]
#23: nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [xpcom/base/nsCOMPtr.h:396]
#24: non-virtual thunk to nsJARChannel::OnStopRequest(nsIRequest*, nsISupports*, nsresult) [modules/libjar/nsJARChannel.cpp:1105]
#25: nsInputStreamPump::OnStateStop() [xpcom/threads/RecursiveMutex.h:118]
#26: nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) [netwerk/base/nsInputStreamPump.cpp:435]
#27: nsInputStreamReadyEvent::Run() [xpcom/base/nsCOMPtr.h:396]
#28: nsThread::ProcessNextEvent(bool, bool*) [mfbt/Maybe.h:224]
#29: NS_ProcessNextEvent(nsIThread*, bool) [xpcom/threads/nsThreadUtils.cpp:524]
#30: nsThreadManager::SpinEventLoopUntil(nsINestedEventLoopCondition*) [xpcom/threads/nsThreadUtils.h:323]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#05: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#06: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#07: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#08: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#09: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#10: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#11: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#12: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#13: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#14: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#15: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#16: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#17: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#18: <name omitted> [js/src/vm/Interpreter.cpp:550]
#19: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#20: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#21: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#22: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#23: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#24: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#25: js::jit::DoCallFallback(JSContext*, js::jit::BaselineFrame*, js::jit::ICCall_Fallback*, unsigned int, JS::Value*, JS::MutableHandle<JS::Value>) [js/src/jit/BaselineIC.cpp:2512]
#01: nsXBLService::FetchBindingDocument(nsIContent*, nsIDocument*, nsIURI*, nsIURI*, nsIPrincipal*, bool, nsIDocument**) [dom/xbl/nsXBLService.cpp:1116]
#02: nsXBLService::LoadBindingDocumentInfo(nsIContent*, nsIDocument*, nsIURI*, nsIPrincipal*, bool, nsXBLDocumentInfo**) [dom/xbl/nsXBLService.cpp:959]
#03: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:720]
#04: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**, nsTArray<nsCOMPtr<nsIURI> >&) [dom/xbl/nsXBLService.cpp:806]
#05: nsXBLService::GetBinding(nsIContent*, nsIURI*, bool, nsIPrincipal*, bool*, nsXBLBinding**) [dom/xbl/nsXBLService.cpp:646]
#06: nsXBLService::LoadBindings(nsIContent*, nsIURI*, nsIPrincipal*, nsXBLBinding**, bool*) [dom/xbl/nsXBLService.cpp:472]
#07: nsCSSFrameConstructor::AddFrameConstructionItemsInternal(nsFrameConstructorState&, nsIContent*, nsContainerFrame*, nsAtom*, int, bool, nsStyleContext*, unsigned int, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5924]
#08: nsCSSFrameConstructor::DoAddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, nsStyleContext*, bool, nsContainerFrame*, nsTArray<nsIAnonymousContentCreator::ContentInfo>*, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5833]
#09: nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsCSSFrameConstructor::InsertionPoint const&, nsCSSFrameConstructor::FrameConstructionItemList&) [layout/base/nsCSSFrameConstructor.cpp:5855]
#10: nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, nsCSSFrameConstructor::InsertionKind, TreeMatchContext*) [dom/base/nsINode.h:1396]
#11: mozilla::PresShell::ContentAppended(nsIDocument*, nsIContent*, nsIContent*) [mfbt/RefPtr.h:287]
#12: nsNodeUtils::ContentAppended(nsIContent*, nsIContent*) [xpcom/ds/nsTObserverArray.h:368]
#13: nsINode::doInsertChildAt(nsIContent*, unsigned int, bool, nsAttrAndChildArray&) [dom/base/nsINode.cpp:1634]
#14: nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) [dom/base/nsINode.cpp:2528]
#15: mozilla::dom::NodeBinding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) [dom/base/nsINode.h:1841]
#16: mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) [dom/bindings/BindingUtils.cpp:3041]
#17: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#18: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:482]
#19: <name omitted> [js/src/vm/Interpreter.cpp:550]
#20: js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/Wrapper.cpp:175]
#21: js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const [js/src/proxy/CrossCompartmentWrapper.cpp:359]
#22: js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) [js/src/proxy/Proxy.cpp:512]
#23: js::proxy_Call(JSContext*, unsigned int, JS::Value*) [js/public/RootingAPI.h:835]
#24: js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [js/src/jscntxtinlines.h:292]
#25: js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) [js/src/vm/Interpreter.cpp:464]
#26: js::jit::DoCallFallback(JSContext*, js::jit::BaselineFrame*, js::jit::ICCall_Fallback*, unsigned int, JS::Value*, JS::MutableHandle<JS::Value>) [js/src/jit/BaselineIC.cpp:2512]
#01: mozJSSubScriptLoader::ReadScript(nsIURI*, JSContext*, JS::Handle<JSObject*>, nsTSubstring<char16_t> const&, char const*, nsIIOService*, bool, JS::MutableHandle<JSScript*>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:530]
#02: mozJSSubScriptLoader::DoLoadSubScriptWithOptions(nsTSubstring<char16_t> const&, LoadSubScriptOptions&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:720]
#03: mozJSSubScriptLoader::LoadSubScript(nsTSubstring<char16_t> const&, JS::Handle<JS::Value>, nsTSubstring<char16_t> const&, JSContext*, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSSubScriptLoader.cpp:581]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
#01: NS_MaybeOpenChannelUsingOpen2(nsIChannel*, nsIInputStream**) [netwerk/base/nsNetUtil.cpp:2272]
#02: mozJSComponentLoader::ObjectForLocation(ComponentLoaderInfo&, nsIFile*, JS::MutableHandle<JSObject*>, JS::MutableHandle<JSScript*>, char**, bool, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:774]
#03: mozJSComponentLoader::ImportInto(nsTSubstring<char> const&, JS::Handle<JSObject*>, JSContext*, JS::MutableHandle<JSObject*>) [js/xpconnect/loader/mozJSComponentLoader.cpp:1136]
#04: mozJSComponentLoader::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/loader/mozJSComponentLoader.cpp:947]
#05: nsXPCComponents_Utils::Import(nsTSubstring<char> const&, JS::Handle<JS::Value>, JSContext*, unsigned char, JS::MutableHandle<JS::Value>) [js/xpconnect/src/XPCComponents.cpp:2513]
